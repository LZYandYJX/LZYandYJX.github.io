<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>快速排序</title>
    <link href="/2023/04/19/quick-sort/"/>
    <url>/2023/04/19/quick-sort/</url>
    
    <content type="html"><![CDATA[<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p><strong>分治</strong></p><ol><li>确定分界点：头 、尾 、（头＋尾）&#x2F;2、 随机</li><li>调整区间，使得小于分界点的数全在其左边，大于分界点的数全在右边<ul><li>利用两个指针在数列两头向中间移动，左边的指针在碰到大于等于分界点时停下，右边的指针反之，都停下时交换两数，循环上述过程，直到两指针相交</li></ul></li><li>递归处理左右两端</li></ol><p>题目:<br><a href="https://www.acwing.com/problem/content/787/">快速排序</a></p><p>完整代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span>  std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span>+<span class="hljs-number">10</span>;<span class="hljs-comment">//加10防止越界</span><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> q[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> i = l - <span class="hljs-number">1</span>, j = r + <span class="hljs-number">1</span>, x = q[l + r &gt;&gt; <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">while</span> (i &lt; j)<br>    &#123;<br>        <span class="hljs-keyword">do</span> i ++ ; <span class="hljs-keyword">while</span> (q[i] &lt; x);<br>        <span class="hljs-keyword">do</span> j -- ; <span class="hljs-keyword">while</span> (q[j] &gt; x);<br>        <span class="hljs-keyword">if</span> (i &lt; j) <span class="hljs-built_in">swap</span>(q[i], q[j]);<br>    &#125;<br>    <span class="hljs-built_in">quick_sort</span>(q, l, j),<span class="hljs-built_in">quick_sort</span>(q, j + <span class="hljs-number">1</span>, r);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;q[i]);<br>    <span class="hljs-built_in">quick_sort</span>(q,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,q[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="代码模板："><a href="#代码模板：" class="headerlink" title="代码模板："></a><strong>代码模板</strong>：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-type">int</span> i = l - <span class="hljs-number">1</span>, j = r + <span class="hljs-number">1</span>, x = q[l + r &gt;&gt; <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">while</span> (i &lt; j)<br>    &#123;<br>        <span class="hljs-keyword">do</span> i ++ ; <span class="hljs-keyword">while</span> (q[i] &lt; x);<br>        <span class="hljs-keyword">do</span> j -- ; <span class="hljs-keyword">while</span> (q[j] &gt; x);<br>        <span class="hljs-keyword">if</span> (i &lt; j) <span class="hljs-built_in">swap</span>(q[i], q[j]);<br>    &#125;<br>    <span class="hljs-built_in">quick_sort</span>(q, l, j), <span class="hljs-built_in">quick_sort</span>(q, j + <span class="hljs-number">1</span>, r);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p><strong>若x取q[l]或者q[r]要考虑边界问题</strong><br>若 递归处用 i-1 和 i ,则x<strong>不可以</strong>取q[l] ,<strong>可以</strong>取q[r]或者q[(l+r+1)&#x2F;2]或者q[l+r+1&gt;&gt;1]等<br>若 递归处用 j 和 j+1 ,则x<strong>不可以</strong>取q[r] ,<strong>可以</strong>取q[l]或者q[(l+r)&#x2F;2]或者q[l+r&gt;&gt;1]等<br>否则可能会出现死循环<br>例如:x取q[l],递归处用i-1和i,排序12,会无限调用递归quick_sort(q,0,1),即无限划分</p><p><strong>快排是不稳定的</strong><br>在排序前，关键字值相等的不同记录，排序后相对位置保持不变的排序方法，称为稳定排序方法（但其实没软用）<br>如何把快排变成稳定的呢—————把快排每个数变成不同的，可把每个数据弄成二元组，双关键字排序</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a><strong>分析</strong></h3><p><strong>边界问题分析</strong><br>分治算法最怕<code>n分成0和n,或n分成n和0</code>,这会造成<em>无限划分</em><br>若<code>x=q[l]</code>时 最极端情况是<code>i=l,j=l</code> 此时若划分为<code>(l,i-1)</code>和<code>(i,r)</code> 其中<code>(i,r)</code>划分的就是<code>n</code> 这就出现了<em>无限划分</em><br>若<code>x=q[r]</code>时 最极端情况时<code>i=r,j=r</code> 此时若划分为<code>(l,j)</code>和<code>(j+1,r)</code> 其中<code>(l,j)</code>划分的就是<code>n</code> 这就出现了<em>无限划分</em><br>最后是关于<code>q[l+r&gt;&gt;1]</code>和<code>q[l+r+1&gt;&gt;1]</code> 的问题,<br><code>q[l+r+1&gt;&gt;1]</code>是向上取整,因为向上取整时有可能取到q[r],为了避免<em>无限划分</em>,所以递归处划分应该是i-1和i<br><code>q[l+r&gt;&gt;1]</code>是向下取整,因为向下取整时有可能取到q[l],为了避免<em>无限划分</em>,所以递归处划分应该时j和j+1<br><a href="https://www.acwing.com/solution/content/16777/"></a></p><p>最后<br>为什么y总要<code>const int N = 1e6+10;</code> 要加10呢 我也没懂 但参考:<a href="https://www.zhihu.com/question/35047872">知乎</a></p><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><h3 id="算法思想-1"><a href="#算法思想-1" class="headerlink" title="算法思想"></a>算法思想</h3><p>分治</p><ol><li>确定分界点：mid&#x3D;l+r&gt;&gt;1</li><li>递归排序left，right</li><li>归并————合二为一</li></ol><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3>]]></content>
    
    
    <categories>
      
      <category>算法基础</category>
      
      <category>第一章</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
