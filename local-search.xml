<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>归并排序和基数排序</title>
    <link href="/2023/05/10/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E5%92%8C%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
    <url>/2023/05/10/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E5%92%8C%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="归并排序和基数排序"><a href="#归并排序和基数排序" class="headerlink" title="归并排序和基数排序"></a>归并排序和基数排序</h1><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
      <category>第八章 排序</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>选择排序</title>
    <link href="/2023/05/10/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
    <url>/2023/05/10/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><h2 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h2><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p>假设排序表为L[1…n],第i趟排序即L[i…n]中选择关键字最小的元素与L(i)交换，每一趟排序可以确定一个元素的最终位置，这样经过n - 1 趟排序就可使得整个排序表有序。</p><h3 id="模板代码"><a href="#模板代码" class="headerlink" title="模板代码"></a>模板代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SelectSort</span><span class="hljs-params">(ElemType A[],<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n - <span class="hljs-number">1</span>;i ++)&#123;              <span class="hljs-comment">//一共进行 n - 1 趟</span><br>        <span class="hljs-type">int</span> min = i;                            <span class="hljs-comment">//记录最小元素的位置</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>;j &lt; n;j ++)           <span class="hljs-comment">//在A[i...n-1]中选择最小的元素</span><br>            <span class="hljs-keyword">if</span>(A[j] &lt; A[min]) min = j;          <span class="hljs-comment">//更新最小元素的位置</span><br>        <span class="hljs-keyword">if</span>(min != i) <span class="hljs-built_in">swap</span>(A[i],A[min]);         <span class="hljs-comment">//封装的swap()函数共移动3次</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><ol><li>空间效率：仅使用常数个辅助单元，故空间效率为O(1).</li><li>时间效率：从上述伪代码中不难看出，在简单选择排序过程中，元素移动的操作次数很少，不会超过3(n - 1)次，最好的情况是移动0次，此时对应的表已有序；但元素比较的次数与序列的初始状态无关，始终是 n(n - 1) &#x2F; 2 次，因此时间复杂度始终是O(n<sup>2</sup>)。</li><li>稳定性：简单选择排序是一种不稳定的排序方法。</li></ol><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><h3 id="算法思想-1"><a href="#算法思想-1" class="headerlink" title="算法思想"></a>算法思想</h3><p>堆的定义：<br>若n个关键字序列L[1…n]满足下面某一条性质，则称为堆(Heap)<br>①若满足：L(i) &gt;&#x3D; L(2i) 且L(i) &gt;&#x3D; L(2i + 1) ( 1 &lt;&#x3D; i &lt;&#x3D; n&#x2F;2)—-&gt; 大根堆(大顶堆)。<br>②若满足：L(i) &lt;&#x3D; L(2i) 且L(i) &lt;&#x3D; L(2i + 1) ( 1 &lt;&#x3D; i &lt;&#x3D; n&#x2F;2)—-&gt; 小根堆(小顶堆)。<br><img src="/2023/05/10/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/2023-05-10-21-03-05.png"></p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
      <category>第八章 排序</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>交换排序</title>
    <link href="/2023/05/10/%E4%BA%A4%E6%8D%A2%E6%8E%92%E5%BA%8F/"/>
    <url>/2023/05/10/%E4%BA%A4%E6%8D%A2%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h1><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p>从后往前(或从前往后)两两比较相邻元素的值，若为逆序(即A[i - 1] &gt; A[i]),则交换他们，直到序列比较完。我们称它为第一趟冒泡，结果是将最小的元素交换到待排序的第一个位置(或将最大的元素交换到待排序序列的最后一个位置)，关键字最小的元素如气泡一般逐渐往上“漂浮”直至“水面”(或关键字最大的元素如石头一般下沉至水底)。下一趟冒泡时，前一趟确定的最小元素不在参与比较，每趟冒泡的结果是把序列中最小元素或(最大元素)放到序列的最终位置…….这样最多做n - 1趟冒泡就能把所有元素排好序。</p><h3 id="模板代码"><a href="#模板代码" class="headerlink" title="模板代码"></a>模板代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BubbleSore</span><span class="hljs-params">(ElemType A[],<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n - <span class="hljs-number">1</span>;i ++)&#123;<br>        <span class="hljs-type">bool</span> flag = <span class="hljs-literal">false</span>;                  <span class="hljs-comment">//表示本趟冒泡是否发生交换的标志</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = n - <span class="hljs-number">1</span>;j &gt; i;j --)       <span class="hljs-comment">//一趟冒泡过程</span><br>            <span class="hljs-keyword">if</span>(A[j - <span class="hljs-number">1</span>] &gt; A[j])&#123;            <span class="hljs-comment">//若为逆序</span><br>                <span class="hljs-built_in">swap</span>(A[j - <span class="hljs-number">1</span>],A[j]);        <span class="hljs-comment">//交换    </span><br>                flag = <span class="hljs-literal">true</span>;<br>            &#125;<br>        <span class="hljs-keyword">if</span>(flag == <span class="hljs-literal">false</span>)<br>            <span class="hljs-keyword">return</span> ;                        <span class="hljs-comment">//本趟遍历后没有发生交换，说明表已经有序</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><ol><li>空间效率：仅使用了常数个辅助单元，因而空间复杂度为O(1)。</li><li>时间效率：最坏情况下的时间复杂度为O(n<sup>2</sup>),平均时间复杂度为O(n<sup>2</sup>)。</li><li>稳定性： 由于i &gt; j  且 A[i] &#x3D; A[j] 时，不会发生交换，因此冒泡排序是一种稳定的排序方法。</li><li>注意：冒泡排序中所产生的有序子序列一定是全局有序的(不同于直接插入排序)，也就是说，有序子序列中的所有元素的关键字一定小于(或大于)无序子序列中所有元素的关键字，这样每趟排序都会将一个元素放置到其最终的位置上。</li></ol><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h3 id="算法思想-1"><a href="#算法思想-1" class="headerlink" title="算法思想"></a>算法思想</h3><p>快速排序的基本思想是基于分治法的：在待排序表L[1…n]中任取一个元素pivot作为数轴(或称基准，通常取首元素)，通过一趟排序将待排序表划分成为独立的两部分L[1…K-1]和L[k+1…n],使得L[1…k-1]中所有元素小于pivot,L[k+1…n]中所有元素大于或等于pivot，则pivot放在了其最终位置L(k)上，这个过程称为一次划分。然后分别递归地对两个子表重复上述过程，直至每部分内中只有一个元素或空为止，即所有元素放在了其最终位置上。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QuickSort</span><span class="hljs-params">(ElemType A[],<span class="hljs-type">int</span> low,<span class="hljs-type">int</span> high)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(low &lt; high&gt;)&#123;                                <span class="hljs-comment">//递归跳出的条件</span><br>    <span class="hljs-comment">// Partition()就是划分操作将表A[low...high]划分为满足上述条件的两个子表</span><br>        <span class="hljs-type">int</span> pivotpos = <span class="hljs-built_in">Partition</span>(A,low,high);       <span class="hljs-comment">//划分    </span><br>        <span class="hljs-built_in">QuickSort</span>(A,low,pivotpos - <span class="hljs-number">1</span>);              <span class="hljs-comment">//依次对两个子表进行递归排序</span><br>        <span class="hljs-built_in">QuickSort</span>(A,pivotpos + <span class="hljs-number">1</span>,high);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Partition</span><span class="hljs-params">(ElemType A[],<span class="hljs-type">int</span> low,<span class="hljs-type">int</span> high)</span></span>&#123;       <span class="hljs-comment">//一趟划分</span><br>    ElemType pivot = A[low];                        <span class="hljs-comment">//将当前表中第一个元素设为枢轴，对表进行划分</span><br>    <span class="hljs-keyword">while</span>(low &lt; high)&#123;                              <span class="hljs-comment">//循环跳出条件</span><br>        <span class="hljs-keyword">while</span>(low &lt; high &amp;&amp; A[high] &gt;= pivot) -- high;<br>        A[low] = A[high];                           <span class="hljs-comment">//将比枢轴小的元素移动到左端</span><br>        <span class="hljs-keyword">while</span>(low &lt; high &amp;&amp; A[low] &lt;= pivot) ++ low;<br>        A[high] = A[low];                           <span class="hljs-comment">//将比枢轴大的元素移动到右端</span><br>    &#125;<br>    A[low] = pivot;                                 <span class="hljs-comment">//枢轴元素存放到最终位置</span><br>    <span class="hljs-keyword">return</span> low;                                     <span class="hljs-comment">//返回存放枢轴的最终位置</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="性能分析-1"><a href="#性能分析-1" class="headerlink" title="性能分析"></a>性能分析</h3><ol><li>空间效率：由于快速排序是递归的，需要借助一个递归工作栈来保存每层递归调用的必要信息，其容量与递归调用的最大深度一致。最好情况下为O(log<sub>2</sub><sup>n</sup>);最坏情况下，因为要进行n - 1次递归调用，所以栈的深度为O(n);平均情况下，栈的深度为O(log<sub>2</sub><sup>n</sup>)。</li><li>时间效率：快速排序的运行时间与划分是否对称有关，快速排序的最坏情况发生在两个区域分别包含n - 1个元素和0个元素时，这种最大限度的不对称若发生在每层递归上，即对应于初始排序表基本有序或基本逆序时，就得到最坏情况下的时间复杂度为O(log<sub>2</sub><sup>n</sup>)。<br>在理想状态下，即Partition()可能做到最平衡的划分，得到的两个子问题的大小都不可能大于n&#x2F;2，在这种情况下，快速排序的运行速度将大大提升，此时，时间复杂度为O(nlog<sub>2</sub><sup>n</sup>)。<br>※快速排序是所有内部排序算法中平均性能最优的排序算法。</li><li>稳定性：在划分算法中，若右端区间有两个关键字相同，且均小于基准值的记录，则在交换到左端区间后，它们的相对位置会发生变化，即快速排序是一种不稳定的排序方法。</li><li>最小递归次数 log<sub>2</sub><sup>n</sup> + 1 次<br>最大递归次数 n<br>时间复杂度 &#x3D; O(n * 递归层数)———— 最好—-&gt;nlog<sub>2</sub><sup>n</sup>   最坏—-&gt;n<sup>2</sup>.</li></ol><h3 id="习题总结"><a href="#习题总结" class="headerlink" title="习题总结"></a>习题总结</h3><ol><li>冒泡排序始终在调整“逆序”，因此交换次数为排列中逆序的个数。</li><li>当待排序数据为基本有序时，每次选取第n个元素为基准，会导致划分区间分配不均匀，不利于发挥快速排序算法的优势。相反，当待排序数据分布比较随机时，基准元素能将序列划分为两个长度大致相等的序列，这时才能发挥快速排序的优势</li><li>快速排序过程构成一个递归树，递归的深度即递归树的高度。枢轴值每次都将子表等分时，递归树的高度为log<sub>2</sub><sup>n</sup>；枢轴值每次都是子表的最大值或最小值时，递归树退化为单链表，树高为n。</li><li>采用递归方式对顺序表进行快速排序，递归的次数与个元素的初始排列有关。若每次划分后分区比较平衡，则递归次数少；若分区不平衡，递归次数多。递归次数与处理顺序是没有关系的。</li></ol>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
      <category>第八章 排序</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>插入排序</title>
    <link href="/2023/05/10/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    <url>/2023/05/10/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><h2 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h2><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><ol><li>基本思想是每次将一个待排序的记录按其关键字大小插入前面已排好序的子序列，直到全部记录插入。</li><li><img src="/2023/05/10/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/2023-05-10-16-55-15.png"><br>要将元素L[i]插入已有序的子序列L[1…i-1]，需要执行以下操作（L[]表示一个表，L()表示一个元素。<br>①查找出L(i)在L[1…i-1]中的插入位置k<br>②将L[k…i-1]中的所有元素依次后移一个位置。<br>③将L(i)复制到L(k)。</li></ol><h3 id="模板代码"><a href="#模板代码" class="headerlink" title="模板代码"></a>模板代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InserSort</span><span class="hljs-params">(ElemType A[],<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-type">int</span> i,j;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>;i &lt;= n;i ++)&#123;         <span class="hljs-comment">//依次将A[2]~A[n]插入前面已排序序列</span><br>        <span class="hljs-keyword">if</span>(A[i] &lt; A[i - <span class="hljs-number">1</span>])&#123;            <span class="hljs-comment">//若A[i]关键码小于前驱，将A[i]插入有序表</span><br>            A[<span class="hljs-number">0</span>] = A[i];                <span class="hljs-comment">//复制为哨兵，A[0]不存放元素</span><br>            <span class="hljs-keyword">for</span>(j = i - <span class="hljs-number">1</span>;A[<span class="hljs-number">0</span>] &lt; A[j];j --) <span class="hljs-comment">//从后往前查找待插入位置</span><br>                A[j + <span class="hljs-number">1</span>] = A[j];        <span class="hljs-comment">//向后挪位</span><br>            A[j + <span class="hljs-number">1</span>] = A[j];            <span class="hljs-comment">//复制到插入位置</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><ol><li>空间效率：仅使用了常数个辅助单元，因而空间复杂度为O(1).</li><li>时间效率：在排序过程中，向有序子表中逐个地插入元素的操作进行了n-1趟，每趟操作都分为比较关键字和移动元素，而比较次数和移动次数取决于待排序表的初始状态<br>※ 在最好情况下，表中元素已经有序，此时每次插入一个元素，都只需比较一次而不用移动元素，因而时间复杂度为O(n)<br>※ 在最坏情况下，表中元素顺序刚好与排序结果中的元素顺序相反（逆序），总的比较次数达到最大，总的移动次数也达到最大，总的时间复杂度为O(n<sup>2</sup>)<br>※ 因此，直接插入排序算法的时间复杂度为O(n<sup>2</sup>)\</li><li>稳定性：由于每次插入元素时总是从后向前先比较再移动，所以不会出现相同元素相对位置发生变化的情况，即直接插入排序是一个稳定的排序方法\</li><li>适用性：直接插入排序算法适用于顺序存储和链式存储的线性表。为链式存储时，可以从前往后查找指定元素的位置。</li></ol><h2 id="折半插入排序"><a href="#折半插入排序" class="headerlink" title="折半插入排序"></a>折半插入排序</h2><h3 id="算法思想-1"><a href="#算法思想-1" class="headerlink" title="算法思想"></a>算法思想</h3><ol><li>在直接插入排序的基础上，将比较和移动操作分离，即先折半查找出元素的待插入位置，然后统一地移动待插入位置之后的所有元素。</li><li>当排序表为顺序表时，可以对直接插入排序做如下改进：由于是顺序存储的线性表，所以查找有序子表时可以用折半查找来实现。确定待插入位置后，就可统一地向后移动元素</li></ol><h3 id="模板代码-1"><a href="#模板代码-1" class="headerlink" title="模板代码"></a>模板代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InserSort</span><span class="hljs-params">(ElemType A[],<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-type">int</span> i,j,low,high,mid;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">2</span>;i &lt;= n;i ++)&#123;                     <span class="hljs-comment">//依次将A[2]~A[n]插入到前面的已排序序列</span><br>        A[<span class="hljs-number">0</span>] = A[i];                            <span class="hljs-comment">//将A[i]暂存到A[0]</span><br>        low = <span class="hljs-number">1</span>;                                <span class="hljs-comment">//设置折半查找的范围</span><br>        high = i - <span class="hljs-number">1</span>;                           <span class="hljs-comment">//设置折半查找的范围</span><br>        <span class="hljs-keyword">while</span>(low &lt;= high)&#123;                     <span class="hljs-comment">//折半查找(默认递增有序)</span><br>            mid = (low + high) / <span class="hljs-number">2</span>;             <span class="hljs-comment">//取中间点</span><br>            <span class="hljs-keyword">if</span>(A[mid] &gt; A[<span class="hljs-number">0</span>]) high = mid - <span class="hljs-number">1</span>;   <span class="hljs-comment">//查找左半子表</span><br>            <span class="hljs-keyword">else</span> low = mid + <span class="hljs-number">1</span>;                 <span class="hljs-comment">//查找右半子表</span><br>        &#125;<br>        <span class="hljs-keyword">for</span>(j = i - <span class="hljs-number">1</span>;j &gt;= high + <span class="hljs-number">1</span>;-- j)<br>        A[j + <span class="hljs-number">1</span>] = A[j];                        <span class="hljs-comment">//统一后移元素，空出插入位置</span><br>        A[high + <span class="hljs-number">1</span>] = A[<span class="hljs-number">0</span>];                     <span class="hljs-comment">//插入操作</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="性能分析-1"><a href="#性能分析-1" class="headerlink" title="性能分析"></a>性能分析</h3><ol><li>比较次数：不难看出，折半插入排序仅减少了比较元素的次数，约为O(nlog<sub>2</sub><sup>n</sup>),该比较次数与待排序表的初始状态无关，仅取决于表中的元素个数n,而元素的移动次数并未发生改变，她依赖于待排序表的初始状态</li><li>时间复杂度：O(n<sup>2</sup>),对于数据量不是很大的排序表，折半插入排序往往能表现出很好的性能。</li><li>稳定性：折半插入排序是一种稳定的排序方法。</li></ol><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><h3 id="算法思想-2"><a href="#算法思想-2" class="headerlink" title="算法思想"></a>算法思想</h3><p>先将待排序表分割成若干形如L[i,i+di+2d,…,i+kd]的“特殊”子表，即把相隔某个“增量”的记录组成一个子表，对各个子表分别进行直接插入排序，当整个表中的元素已呈“基本有序”时，再对全体记录进行一次直接插入排序。</p><h3 id="模板代码-2"><a href="#模板代码-2" class="headerlink" title="模板代码"></a>模板代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ShellSort</span><span class="hljs-params">(ElemType A[],<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-comment">//A[0]只是暂存单元，不是哨兵，当j &lt;= 0 时，插入位置已到</span><br>    <span class="hljs-type">int</span> dk,i,j;<br>    <span class="hljs-keyword">for</span>(dk = n / <span class="hljs-number">2</span>;dk &gt;= <span class="hljs-number">1</span>;dk = dk / <span class="hljs-number">2</span>)                             <span class="hljs-comment">//增量变化（无统一规定）</span><br>        <span class="hljs-keyword">for</span>(i = dk + <span class="hljs-number">1</span>;i &lt;= n;++ i)<br>            <span class="hljs-keyword">if</span>(A[i] &lt; A[i - dk])&#123;                                   <span class="hljs-comment">//需将A[i]插入有序增量子表</span><br>                A[<span class="hljs-number">0</span>] = A[i];                                        <span class="hljs-comment">//暂存在A[0]        </span><br>                <span class="hljs-keyword">for</span>(j = i - dk;j &gt; <span class="hljs-number">0</span> &amp;&amp; A[<span class="hljs-number">0</span>] &lt; A[j];j -= dk)<br>                    A[j + dk] = A[j];                               <span class="hljs-comment">//记录后移，查找插入的位置</span><br>                A[j + dk] = A[<span class="hljs-number">0</span>];                                   <span class="hljs-comment">//插入</span><br>            &#125;<span class="hljs-comment">//if</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="性能分析-2"><a href="#性能分析-2" class="headerlink" title="性能分析"></a>性能分析</h3><ol><li>空间效率：仅使用常数个辅助单元，因而空间复杂度为O(1)。</li><li>时间效率：由于希尔排序的时间复杂度依赖于增量序列的函数，这涉及数学上尚未解决的难题，所以其时间复杂度分析比较困难。当n在某个特定范围时，希尔排序的时间复杂度为O(n<sup>1.3</sup>)。在最坏情况下希尔排序的时间复杂度为O(n<sup>2</sup>)。</li><li>稳定性：当相同关键字的记录被划分到不同的子表时，可能会改变他们之间的相对次序，因此希尔排序是一种不稳定的排序方法。</li><li>适用性：希尔排序算法仅适用于线性表为顺序存储的情况。</li></ol><h2 id="习题总结"><a href="#习题总结" class="headerlink" title="习题总结"></a>习题总结</h2><ol><li>直接插入排序在最坏的情况下要做n(n - 1 ) &#x2F; 2 次关键字的比较。(不考虑于哨兵的比较)</li><li>在待排序的元素序列基本有序的前提下，效率最高的排序方法是(A)<br>A. 直接插入排序  B. 简单选择排序  C. 快速排序  D. 归并排序<br>※ 由于这里的序列基本有序，使用直接插入排序算法的时间复杂度接近O(n)，而使用其他算法的时间复杂度均大于O(n)。</li><li>对n个元素的顺序表采用直接插入排序算法进行排序，在最坏情况下所需的比较次数是( n(n - 1) &#x2F; 2); 在最好情况下所需的比较次数是( n - 1)。</li><li>※ 在排序过程中，每趟能确定一个元素在其最终位置的有冒泡排序、简单选择排序、堆排序、快速排序，其中前三者能形成全局有序的子序列，后者能确定枢轴元素的最终位置。</li><li>在直接插入排序中，若待排序列中的最后一个元素应插入表中的第一个位置，则前面的有序子序列中的所有元素都不在最终的位置上</li><li>希尔排序是对直接排序算法改进后提出来的，本质上仍属于插入排序的范围。</li><li>虽然折半插入排序是对直接插入排序的改进，但它改进的只是比较的次数，而移动次数并未发生变化，时间复杂度仍为O(n<sup>2</sup>)。</li><li>基于插入、交换、选择的三类排序方法中，通常简单方法是稳定的(直接插入、折半插入、冒泡),但有一个例外就是简单选择，复杂方法都是不稳定的(希尔、快排、堆排)。</li><li>每趟冒泡和选择排序后，总会有一个元素被放置在最终位置上、2路归并算法经过第二趟后应该是每4个元素是有序的</li><li>折半插入排序的比较次数与初始序列初态无关，为O(nlog<sub>2</sub><sup>n</sup>)。而直接插入排序的比较次数与序列初态有关，为O(n)~O(n<sup>2</sup>)。</li></ol>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
      <category>第八章 排序</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>并查集</title>
    <link href="/2023/05/06/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <url>/2023/05/06/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h2>]]></content>
    
    
    <categories>
      
      <category>算法基础</category>
      
      <category>第二章</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Trie</title>
    <link href="/2023/05/06/Trie/"/>
    <url>/2023/05/06/Trie/</url>
    
    <content type="html"><![CDATA[<h1 id="Trie数"><a href="#Trie数" class="headerlink" title="Trie数"></a>Trie数</h1><h2 id="Tire树介绍"><a href="#Tire树介绍" class="headerlink" title="Tire树介绍"></a>Tire树介绍</h2><ol><li>Tire 树 又称单词查找树，是一种树形结构，是一种哈希树的变种。</li><li>Tire 树是一种能够快速存储和查找一组字符串集合的数据结构，是以空间换时间，利用字符串的前缀来降低查询时间。</li><li>与二叉树不同，Tire 树有 26 子节点对应 26 个字母，根节点不包含字符串，从根节点到某个节点，经过的字符连起来的字符串就是对应的字符串。当储存结束一个字符串后，尾节点会产生一个标记，表示当前字符串已经结束了。</li><li>典型应用：用于统计，排序和保存大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。</li><li>如下图就是一棵由字符串 abcdef，abdef，aced，bcdf，bcfc，bcff，cdaa，组成的 Tire 树：<br><img src="/2023/05/06/Trie/2023-05-06-20-26-24.png"></li></ol><h2 id="优缺点及性质"><a href="#优缺点及性质" class="headerlink" title="优缺点及性质"></a>优缺点及性质</h2><ol><li>优点：利用字符串的公共前缀来减少查询时间，最大限度地减少无谓的字符串比较，查询效率比哈希树高。</li><li>缺点：空间复杂度比较大。</li><li>优化：我们可以用链表来动态开辟空间，达到空间上利用率的最大化。</li><li>性质：</li></ol><p>（1）根结点不包含字符，其他的每一个节点只包含一个字符。</p><p>（2）从根结点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串（假如某个节点为一个字符串的结尾，对其打个标记即可）。</p><p>（3）每个节点的所有子节点包含的字符都不相同。</p><h2 id="Tire树例题—-gt-Tire字符串统计"><a href="#Tire树例题—-gt-Tire字符串统计" class="headerlink" title="Tire树例题—-&gt;Tire字符串统计"></a>Tire树例题—-&gt;Tire字符串统计</h2><p><img src="/2023/05/06/Trie/2023-05-06-20-30-33.png"></p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> son[N][<span class="hljs-number">26</span>],cnt[N],idx;      <span class="hljs-comment">//son[N][26]:储存子节点的位置，分支最多26条,cnt[N]表示以当前这个点结尾的单词有多少个，idx表示当前用到了哪个下标，下标是0的点，既是根节点，又是空节点</span><br><span class="hljs-type">char</span> str[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">char</span> str[])</span></span>&#123;<br>    <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;      <span class="hljs-comment">//从根节点出发</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;str[i];i ++)&#123;<br>        <span class="hljs-type">int</span> u = str[i] - <span class="hljs-string">&#x27;a&#x27;</span>;           <span class="hljs-comment">//当前节点是什么字符</span><br>        <span class="hljs-keyword">if</span>(!son[p][u]) son[p][u] = ++ idx;  <span class="hljs-comment">//如果节点不存在就新建节点</span><br>        p = son[p][u];      <span class="hljs-comment">//p指向新建的节点</span><br>    &#125;<br>    cnt[p] ++;      <span class="hljs-comment">//表示以这个字母结尾的单词增加了一个</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">char</span> str[])</span></span>&#123;<br>    <span class="hljs-type">int</span> p;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;str[i];i ++)&#123;<br>        <span class="hljs-type">int</span> u = str[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span>(!son[p][u])  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;       <span class="hljs-comment">//该节点不存在，即该字符串不存在</span><br>        p = son[p][u];<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt[p];      <span class="hljs-comment">//返回字符串出现的次数</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">while</span>(n -- )&#123;<br>        <span class="hljs-type">char</span> op[<span class="hljs-number">2</span>];<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%s&quot;</span>,op,str);<br>        <span class="hljs-keyword">if</span>(op[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;I&#x27;</span>) <span class="hljs-built_in">insert</span>(str);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">query</span>(str));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Tire树例题—–-gt-最大异或对"><a href="#Tire树例题—–-gt-最大异或对" class="headerlink" title="Tire树例题—–&gt;最大异或对"></a>Tire树例题—–&gt;最大异或对</h2><p><img src="/2023/05/06/Trie/2023-05-06-20-32-45.png"></p><h3 id="暴力做法"><a href="#暴力做法" class="headerlink" title="暴力做法"></a>暴力做法</h3><ol><li>暴力做法通俗易懂，两个 for 循环，相互枚举每一个值，异或，最后答案为其中的最大值。</li><li>暴力做法虽然易做，但是会出现 超时 问题。</li></ol><h3 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br>cin&gt;&gt;a[i];<br>&#125;<br><span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)<br>&#123;<br>res=<span class="hljs-built_in">max</span>(res,a[i]^a[j]);<br>&#125;<br>&#125;<br>cout&lt;&lt;res&lt;&lt;endl;<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>); <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="优美解法"><a href="#优美解法" class="headerlink" title="优美解法"></a>优美解法</h3><ol><li>首先，需要搞清楚 异或操作。</li><li>如果 A &#x3D; 1101 ，B &#x3D; 0111，那么 A ^ B &#x3D; 1010。详细讲解请见 基础算法-位运算</li><li>对暴力做法进行优化，使其满足时间限制。</li><li>由异或操作的计算公式可知，我们只需要先遍历每一个数，然后根据遍历的数的对应二进制形式，选取一个尽可能二进制形式每一位都不同的数字，得到该数字的最大异或值，最后再选举最大的异或值。在得到每一个数字的最大亦或值的选取过程就是一个 Tire 数。</li><li>举例说明：<br><img src="/2023/05/06/Trie/2023-05-06-20-35-56.png"></li></ol><h3 id="完整代码-2"><a href="#完整代码-2" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>, M = <span class="hljs-number">3100010</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> a[N], son[M][<span class="hljs-number">2</span>], idx;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">30</span>; i &gt;= <span class="hljs-number">0</span>; i -- )<br>    &#123;<br>        <span class="hljs-type">int</span> &amp;s = son[p][x &gt;&gt; i &amp; <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">if</span> (!s) <br>        &#123;<br>            idx ++;<br>            s = idx;<br>        &#125;<br>        p = s;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>, res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">30</span>; i &gt;= <span class="hljs-number">0</span>; i -- )<br>    &#123;<br>        <span class="hljs-type">int</span> s = x &gt;&gt; i &amp; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (son[p][!s])<br>        &#123;<br>            res += <span class="hljs-number">1</span> &lt;&lt; i;<br>            p = son[p][!s];<br>        &#125;<br>        <span class="hljs-keyword">else</span> <br>        &#123;<br>            p = son[p][s];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        cin &gt;&gt; a[i];<br>        <span class="hljs-built_in">insert</span>(a[i]);<br>    &#125;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        res = <span class="hljs-built_in">max</span>(res, <span class="hljs-built_in">search</span>(a[i]));<br>    &#125;<br>    cout &lt;&lt; res &lt;&lt; endl;<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法基础,第二章</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>KMP</title>
    <link href="/2023/05/06/KMP/"/>
    <url>/2023/05/06/KMP/</url>
    
    <content type="html"><![CDATA[<h1 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h1><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//KMP</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>,M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">char</span> p[N],s[M];<br><span class="hljs-type">int</span> ne[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; p + <span class="hljs-number">1</span> &gt;&gt; m &gt;&gt; s + <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">//求next的过程</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>,j = <span class="hljs-number">0</span>;i &lt;= n;i ++)&#123;<br>        <span class="hljs-keyword">while</span>(j &amp;&amp; p[i] != p[j + <span class="hljs-number">1</span>]) j = ne[j];<br>        <span class="hljs-keyword">if</span>(p[i] == p[j + <span class="hljs-number">1</span>]) j ++;<br>        ne[i] = j;<br>    &#125;<br><br>    <span class="hljs-comment">//KMP匹配过程</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>,j = <span class="hljs-number">0</span>;i &lt;= m;i ++)&#123;<br>        <span class="hljs-keyword">while</span>(j &amp;&amp; s[i] != p[j + <span class="hljs-number">1</span>]) j = ne[j];<br>        <span class="hljs-keyword">if</span>(s[i] == p[j + <span class="hljs-number">1</span>]) j ++;<br>        <span class="hljs-keyword">if</span>(j == n)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,i - n);<br>            j = ne[j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法基础</category>
      
      <category>第二章</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>栈与队列：单调队列、单调栈</title>
    <link href="/2023/05/04/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97%EF%BC%9A%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E3%80%81%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    <url>/2023/05/04/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97%EF%BC%9A%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E3%80%81%E5%8D%95%E8%B0%83%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<h1 id="栈与队列：单调队列、单调栈"><a href="#栈与队列：单调队列、单调栈" class="headerlink" title="栈与队列：单调队列、单调栈"></a>栈与队列：单调队列、单调栈</h1><h2 id="栈和队列的基本操作"><a href="#栈和队列的基本操作" class="headerlink" title="栈和队列的基本操作"></a>栈和队列的基本操作</h2><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><ol><li>栈：先进后出</li><li>队列：先进先出</li></ol><h3 id="模板代码"><a href="#模板代码" class="headerlink" title="模板代码"></a>模板代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> +<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> stk[N],tt = <span class="hljs-number">0</span>;          <span class="hljs-comment">//tt表示栈顶下标,初始时为0</span><br><span class="hljs-comment">// ********************** 栈</span><br><span class="hljs-comment">//插入</span><br>stk[ ++ tt] = x;<br><br><span class="hljs-comment">//弹出</span><br>tt --;<br><br><span class="hljs-comment">//判断栈是否为空</span><br><span class="hljs-keyword">if</span>(tt &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">not</span> empty<br><span class="hljs-keyword">else</span> empty<br><br><span class="hljs-comment">//栈顶</span><br>stk[tt];<br><span class="hljs-comment">// ********************** 队列</span><br><span class="hljs-comment">//队尾插入元素，队头弹出元素</span><br><span class="hljs-type">int</span> q[N],hh,tt = <span class="hljs-number">-1</span>;         <span class="hljs-comment">//hh表示队头，tt表示队尾初始时为-1</span><br><br><span class="hljs-comment">//插入</span><br>q[++ tt] = x;<br><br><span class="hljs-comment">//弹出</span><br>hh ++;<br><br><span class="hljs-comment">//判断队列是否为空</span><br><span class="hljs-keyword">if</span>(hh &lt;= tt) <span class="hljs-keyword">not</span> empty<br><span class="hljs-keyword">else</span> empty<br><br><span class="hljs-comment">//取出队头元素</span><br>q[hh];<br><br></code></pre></td></tr></table></figure><h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><ol><li>给定一个序列，求出在这个序列当中，每一个数离他左边最近的数且比它小的数在什么地方，不存在返回-1   </li><li>单调递增栈： 从栈顶往栈底看，是单调递增的关系（含相等）</li><li>单调递减栈： 从栈顶往栈底看，是单调递减的关系（含相等）</li><li><img src="/2023/05/04/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97%EF%BC%9A%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E3%80%81%E5%8D%95%E8%B0%83%E6%A0%88/2023-05-05-11-22-41.png"></li></ol><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//单调栈</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> stk[N],tt;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i ++)&#123;<br>        <span class="hljs-type">int</span> x;<br>        cin &gt;&gt; x;<br>        <span class="hljs-keyword">while</span>(tt &amp;&amp; stk[tt] &gt;= x) tt --;<br>        <span class="hljs-keyword">if</span>(tt) cout &lt;&lt; stk[tt] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-number">-1</span> &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>        stk[++ tt] = x;<br>    &#125;<br>    <span class="hljs-keyword">return</span>  <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h2><h3 id="算法思想-1"><a href="#算法思想-1" class="headerlink" title="算法思想"></a>算法思想</h3><ol><li>给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。返回 滑动窗口中的最小值</li></ol><h3 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//单调队列</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n,k;<br><span class="hljs-type">int</span> a[N],q[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i ++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>    <span class="hljs-type">int</span> hh = <span class="hljs-number">0</span>,tt = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i ++)&#123;<br>        <span class="hljs-comment">//判断队头是否已经滑出窗口</span><br>        <span class="hljs-keyword">if</span>(hh &lt;= tt &amp;&amp; i - k + <span class="hljs-number">1</span> &gt; q[hh])  hh ++;<br>        <span class="hljs-keyword">while</span>(hh &lt;= tt &amp;&amp; a[q[tt]] &gt;= a[i]) tt --;<br>        q[++ tt] = i;<br>        <span class="hljs-keyword">if</span>(i &gt;= k - <span class="hljs-number">1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,a[q[hh]]);<br>    &#125;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    hh = <span class="hljs-number">0</span>,tt = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i ++)&#123;<br>        <span class="hljs-comment">//判断队头是否已经滑出窗口</span><br>        <span class="hljs-keyword">if</span>(hh &lt;= tt &amp;&amp; i - k + <span class="hljs-number">1</span> &gt; q[hh])  hh ++;<br>        <span class="hljs-keyword">while</span>(hh &lt;= tt &amp;&amp; a[q[tt]] &lt;= a[i]) tt --;<br>        q[++ tt] = i;<br>        <span class="hljs-keyword">if</span>(i &gt;= k - <span class="hljs-number">1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,a[q[hh]]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法基础</category>
      
      <category>第二章</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>链表与邻接表：树与图的存储</title>
    <link href="/2023/05/04/%E9%93%BE%E8%A1%A8%E4%B8%8E%E9%82%BB%E6%8E%A5%E8%A1%A8%EF%BC%9A%E6%A0%91%E4%B8%8E%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8/"/>
    <url>/2023/05/04/%E9%93%BE%E8%A1%A8%E4%B8%8E%E9%82%BB%E6%8E%A5%E8%A1%A8%EF%BC%9A%E6%A0%91%E4%B8%8E%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="链表与邻接表：树与图的存储（用数组模拟）"><a href="#链表与邻接表：树与图的存储（用数组模拟）" class="headerlink" title="链表与邻接表：树与图的存储（用数组模拟）"></a>链表与邻接表：树与图的存储（用数组模拟）</h1><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><h3 id="算法思想（静态链表）"><a href="#算法思想（静态链表）" class="headerlink" title="算法思想（静态链表）"></a>算法思想（静态链表）</h3><ol><li>用数组模拟效率高，以为如果用结构体的话，每次要new一个节点，这样会很慢</li><li>单链表–&gt;邻接表–&gt;存储树和图</li><li>双链表–&gt;用来优化某些题目</li><li>刚开始设置头结点head为空</li><li>数组表示链表，e[N]为节点存储的值，ne[N]节点指向的下一个节点，空节点的下标用-1表示<br><img src="/2023/05/04/%E9%93%BE%E8%A1%A8%E4%B8%8E%E9%82%BB%E6%8E%A5%E8%A1%A8%EF%BC%9A%E6%A0%91%E4%B8%8E%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8/2023-05-04-16-48-25.png"></li></ol><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">//head表示头结点的下标</span><br><span class="hljs-comment">//e[i]表示节点i的值</span><br><span class="hljs-comment">//ne[i]表示节点i的next指针是多少</span><br><span class="hljs-comment">//idx 存储当前已经用到了哪个点</span><br><br><span class="hljs-type">int</span> head,e[N],ne[N],idx;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    head = <span class="hljs-number">-1</span>;<br>    idx = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//将x插入头结点</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add_to_head</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    e[idx] = x;<br>    ne[idx] = head;<br>    head = idx;<br>    idx++;<br>&#125;<br><br><span class="hljs-comment">//将x插入到下标是k的节点的后面</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> x)</span></span>&#123;<br>    e[idx] = x;<br>    ne[idx] = ne[k];<br>    ne[k] = idx;<br>    idx ++;<br>&#125;<br><br><span class="hljs-comment">//将下标是k的节点的下一个节点删除</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span></span>&#123;<br>    ne[k] = ne[ne[k]];      <span class="hljs-comment">//算法中不需要管释放空间的问题</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> m;<br>    cin &gt;&gt; m;<br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-keyword">while</span>(m--)&#123;<br>        <span class="hljs-type">int</span> k,x;<br>        <span class="hljs-type">char</span> op;<br><br>        cin &gt;&gt; op;<br>        <span class="hljs-keyword">if</span>(op == <span class="hljs-string">&#x27;H&#x27;</span>)&#123;<br>            cin &gt;&gt; x;<br>            <span class="hljs-built_in">add_to_head</span>(x);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-string">&#x27;D&#x27;</span>)&#123;<br>            cin &gt;&gt; k;<br>            <span class="hljs-keyword">if</span>( !k ) head = ne[head];<br>            <span class="hljs-built_in">remove</span>(k - <span class="hljs-number">1</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            cin &gt;&gt; k &gt;&gt; x;<br>            <span class="hljs-built_in">add</span>(k - <span class="hljs-number">1</span>,x);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = head;i != <span class="hljs-number">-1</span>;i = ne[i]) cout &lt;&lt; e[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    cout &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h2><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p>与单链表类似，只是多了一个指向左边的数组，初始化不一样而已。</p><h3 id="模板代码"><a href="#模板代码" class="headerlink" title="模板代码"></a>模板代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//双链表</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> m;<br><span class="hljs-type">int</span> e[N],l[N],r[N],idx;<br><br><span class="hljs-comment">//初始化</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//0表示左端点，1表示右端点</span><br>    r[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>,l[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    idx = <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-comment">//在下标是k的点的右边插入x</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> x)</span></span>&#123;  <span class="hljs-comment">//在下表为k的点的左边插入一个点，调用函数add(l[k],x)即可</span><br>    e[idx] = x;<br>    r[idx] = r[k];<br>    l[idx] = k;<br>    l[r[k]] = idx;      <span class="hljs-comment">//此操作一定在r[k] = idx 之前</span><br>    r[k] = idx;<br>&#125;<br><br><span class="hljs-comment">//删除下表为k的点</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span></span>&#123;<br>    r[l[k]] = r[k];<br>    l[r[k]] = l[k];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法基础</category>
      
      <category>第二章</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第三章Tag文件与Tag标记</title>
    <link href="/2023/05/04/JSP%E7%AC%AC%E4%B8%89%E7%AB%A0/"/>
    <url>/2023/05/04/JSP%E7%AC%AC%E4%B8%89%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="第三章Tag文件与Tag标记"><a href="#第三章Tag文件与Tag标记" class="headerlink" title="第三章Tag文件与Tag标记"></a>第三章Tag文件与Tag标记</h1><h2 id="3-1Tag文件"><a href="#3-1Tag文件" class="headerlink" title="3.1Tag文件"></a>3.1Tag文件</h2><h3 id="3-1-1Tag文件的结构"><a href="#3-1-1Tag文件的结构" class="headerlink" title="3.1.1Tag文件的结构"></a>3.1.1Tag文件的结构</h3><p>Tag文件是扩展名为.tag的文本文件，其结构和JSP文件类似。其中可以有普通的HTML标记符、某些特殊的指令标记、成员变量声明和方法的定义。Java程序片和Java表达式。</p><h3 id="3-1-2Tag文件的保存"><a href="#3-1-2Tag文件的保存" class="headerlink" title="3.1.2Tag文件的保存"></a>3.1.2Tag文件的保存</h3><p>1.Tag文件所在目录</p><p>在 JSP 中，标签文件通常存储在 WEB-INF&#x2F;tags 目录下，该目录是受保护的，无法从客户端（即浏览器）访问。标签文件应该放在具有描述性子目录名称的目录下，例如：WEB-INF&#x2F;tags&#x2F;forms 或 WEB-INF&#x2F;tags&#x2F;utilities。这样会使您的标签更易于组织和查找。</p><p>2.Tag文件的编码</p><p>在 JSP 标签文件中使用的编码方式与常规的 JSP 页面相同。您可以指定 JSP 标签文件的编码方式，例如 UTF-8，通过在 JSP 标签文件的开始标记 &lt;%@ tag %&gt; 中添加 charset 属性。例如：</p><p>&lt;%@ tag language&#x3D;”java” pageEncoding&#x3D;”UTF-8” %&gt;<br>注意：在 JSP 标签文件的开始标记中使用 pageEncoding 属性指定编码方式只是一种指定编码的方式。确保在编辑标签文件时使用相同的编码方式。</p><h2 id="3-2Tag标记"><a href="#3-2Tag标记" class="headerlink" title="3.2Tag标记"></a>3.2Tag标记</h2><h3 id="3-2-1"><a href="#3-2-1" class="headerlink" title="3.2.1"></a>3.2.1</h3><p>在 JSP 中，标签（Tag）和标签文件（Tag file）是不同的概念。 标签是用于在 JSP 页面中引用自定义的 Java 代码的一种机制。JSP 标签包含正文和属性，可用于在 JSP 中重复使用Java 代码块。标签通常用于实现页面布局、处理表单、执行业务逻辑等操作。标签的使用方式类似于 HTML 标签，但标签的实现通常是基于 Java 类、接口和配置文件。 而标签文件（Tag file）是一种用于创建 JSP 标签的机制。标签文件包含 JSP 代码和 Java 代码，可以用于定义与标签相关的行为和逻辑。标签文件本质上是一个 JSP 网页，但是它不是在浏览器中运行，而是在 JSP 引擎中执行。使用标签文件可以使 JSP 页面更易于组织和维护。 为了使用标签文件，我们需要： 1. 创建一个标签文件，这可以是一个 JSP 文件，其中包含标签的实现代码，或者是一个 JSPF（JSP Fragment）文件，其中只包含标签的实现代码。 2. 在标签文件中定义所需的属性和标签正文。 3. 在 JSP 页面中使用类似于 HTML 标签的方式来调用标签。 4. 在 JSP 页面的声明部分中导入标签库并指定标签文件的路径。 例如，以下代码演示了在 JSP 页面中如何使用自定义的标签：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JSP">&lt;%@ taglib prefix=<span class="hljs-string">&quot;myTag&quot;</span> uri=<span class="hljs-string">&quot;/WEB-INF/tags/myTag.tag&quot;</span> %&gt;<br>&lt;myTag:helloWorld name=<span class="hljs-string">&quot;John&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>其中，标签库前缀（prefix）是 myTag，标签文件的路径（uri）是 &#x2F;WEB-INF&#x2F;tags&#x2F;myTag.tag，name 属性的值是 John。在这个例子中，我们将所有的自定义标签存储在标签文件 myTag.tag 中，该文件位于 WEB-INF&#x2F;tags 目录下。</p><h3 id="3-2-2"><a href="#3-2-2" class="headerlink" title="3.2.2"></a>3.2.2</h3><p>在 JSP 中，可以使用自定义的标签（Tag）来组织和重用页面。自定义标签可以看做是用于替代 Java 代码的高层次的组合元素。标签可以执行各种任务，例如： - 根据参数传递数据 - 控制页面流程 - 实现业务逻辑 - 处理表单数据 - 生成 HTML 或其他格式的文本 在 JSP 中使用标签包括两个部分： 1. 定义标签的实现 在 JSP 中定义标签的实现通常使用 Java 类和配置文件。Java 类实现标签的具体逻辑和行为，配置文件定义标签的属性、方法和行为。标签的实现通常存储在 WEB-INF&#x2F;classes 或 WEB-INF&#x2F;lib 目录中。 以下是一个自定义标签的实现示例：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs JSP"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloTag</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TagSupport</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">doStartTag</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JspException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">JspWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> pageContext.getOut();<br>            out.write(<span class="hljs-string">&quot;&lt;h1&gt;Hello, &quot;</span> + name + <span class="hljs-string">&quot;!&lt;/h1&gt;&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JspException</span>(<span class="hljs-string">&quot;Error: &quot;</span> + e.getMessage());<br>        &#125;<br>        <span class="hljs-keyword">return</span> SKIP_BODY;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子中，我们使用 TagSupport 类作为基类，并实现了 doStartTag() 方法来生成 HTML 消息。在标签实现类中，我们还定义了标签的属性 name。 2. 使用自定义标签 在 JSP 页面中使用自定义标签需要以下步骤： - 在 JSP 页面的顶部导入标签库，例如：&lt;%@taglib prefix&#x3D;”mytag” uri&#x3D;”&#x2F;WEB-INF&#x2F;tags&#x2F;mytag.tld”%&gt;。 - 在需要使用标签的位置插入标签代码，例如：&lt;mytag:hello name&#x3D;”John” &#x2F;&gt;。 在这个例子中，我们将自定义标签库的前缀设置为 mytag，标签库的 URI 是 &#x2F;WEB-INF&#x2F;tags&#x2F;mytag.tld。我们还使用自定义标签生成了一个简单的 HTML 消息，其属性 name 的值是 John。 以上是自定义标签在 JSP 中的基本用法。使用标签可以大大简化 JSP 页面的开发和维护，提高代码的重用性和可读性。</p><h3 id="3-2-3"><a href="#3-2-3" class="headerlink" title="3.2.3"></a>3.2.3</h3><p>在 JSP 中，标签（Tag）是一个类似于 HTML 标签的元素，可以用于编写可重用的 Java 代码。标签在 JSP 引擎中运行时，会被解析成 Java 代码，并与页面的其他部分一起编译成一个 Servlet。在客户端访问 JSP 页面时，Servlet 会根据请求生成响应并发送给客户端。 自定义标签的运行原理如下： 1. 标签解析 当 JSP 引擎遇到自定义标签时，会首先解析标签的定义，并根据标签定义生成相应的 Java 代码。标签定义可以包括标签的属性、行为和逻辑，以及标签的处理类和配置文件等。 2. 标签处理 一旦标签被解析，标签处理类就会被实例化，并在页面的运行时环境中执行。标签的属性值会被传递给标签处理类，并在标签处理类中进行相应的处理。此过程中产生的任何输出都会传递给 JSP 引擎，最终被合并到页面的其他部分中。 3. 页面生成 在 JSP 引擎结束处理标签后，它将合并标签处理类产生的任何输出，并将其与页面的其他部分一起编译成一个 Servlet。在客户端访问 JSP 页面时，Servlet 会根据请求生成响应并发送给客户端。 简而言之，JSP 标签的运行原理基于标签的解析、标签处理和页面生成。标签的解析和处理是在服务器端完成的，可以让开发人员编写更加简洁、可重用的代码。这样可以提高开发效率和代码的可读性，同时也可以减少代码的重复编写。</p><h2 id="3-3Tag文件中的常用指令"><a href="#3-3Tag文件中的常用指令" class="headerlink" title="3.3Tag文件中的常用指令"></a>3.3Tag文件中的常用指令</h2><h3 id="3-3-1Tag指令"><a href="#3-3-1Tag指令" class="headerlink" title="3.3.1Tag指令"></a>3.3.1Tag指令</h3><p>tag指令</p><p>&lt;%@ tag %&gt; 此 JSP 指令用于声明自定义标记的页面特定属性。它位于 JSP 页面的顶部，在任何 HTML 或 Java 代码之前，用于定义标记的属性和特征。这些属性可以包括标记名称、标记正文内容、属性名称和类型等内容。</p><h3 id="3-3-2-include指令"><a href="#3-3-2-include指令" class="headerlink" title="3.3.2 include指令"></a>3.3.2 include指令</h3><p>在Tag文件中也有和JSP文件类似的include指令标记，其使用方法和作用与JSP文件中的include指令类似。</p><h3 id="3-3-3-arrtibute指令"><a href="#3-3-3-arrtibute指令" class="headerlink" title="3.3.3 arrtibute指令"></a>3.3.3 arrtibute指令</h3><p>在Tag文件中通过使用attribute指令让使用它的JSP页面向该Tag文件传递需要的数据。attribute指令的格式如下：</p><p>&lt;%@ attribute name &#x3D;”对象名字”required&#x3D;”true”|”false” type&#x3D;”对象的类型”%&gt;<br> 例如：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ <span class="hljs-type">attribute</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;result&quot;</span>required=<span class="hljs-string">&quot;true&quot;</span> type=<span class="hljs-string">&quot;java.long.Double&quot;</span>%&gt;<br></code></pre></td></tr></table></figure><p>就相当于Tag文件中有了一个名字是result的对象，但Tag文件不需要创建该对象的result，而是等待JSP页面将一个Double型的对象的引用传递给result。 </p><p>JSP页面使用Tag标记向所调用的Tag文件中name指定的对象传递一个引用，方式如下</p><p>&lt;前缀：Tag文件名字 对象名字&#x3D;”对象的引用”&#x2F;&gt;<br> 比如，JSP页面使用Tag标记（假设尿急浅醉为computer）调用myTag.tag:</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;computer:<span class="hljs-type">myTag</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;new Double(3.1415926)&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><h3 id="3-3-4-variable指令"><a href="#3-3-4-variable指令" class="headerlink" title="3.3.4 variable指令"></a>3.3.4 variable指令</h3><p>Tag文件通过使用variable指令可以将Tag文件中的对象返回给调用该Tag文件的JSP页面</p><p>variable指令格式如下：</p><p>&lt;%@ variable name-given&#x3D;”对象名”variable-class&#x3D;”对象类型”scope&#x3D;”有效范围”%&gt;<br>Tag文件为了给JSP页面返回一个对象，就必须将返回的对象的名字以及该对象的引用储存到Tomcat服务器提供的内置对象jspContext中，比如：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ variable name-given=<span class="hljs-string">&quot;time&quot;</span><br>    variable-class=<span class="hljs-string">&quot;java.time.LocalDate&quot;</span>scop=AT_END<span class="hljs-string">&quot;%&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>双指针算法</title>
    <link href="/2023/04/24/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/"/>
    <url>/2023/04/24/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="双指针算法"><a href="#双指针算法" class="headerlink" title="双指针算法"></a>双指针算法</h1><h2 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h2><p><img src="/2023/04/24/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/2023-04-24-17-57-13.png"></p><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p>输入一行字串如“abc def ghi” <br>将单词输出即<br>abc<br>def<br>ghi<br>※思路，定义两个指针，i指向第一个单词，j向后扫描，如果扫到’ ‘空格就停下来，然后输出i到j-1包含的单词，然后使i &#x3D; j进入下一层循环。\</p><h3 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">char</span> str[<span class="hljs-number">100</span>];<br>    <span class="hljs-built_in">gets</span>(str);<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">strlen</span>(str);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">0</span>;i &lt; n;i ++)&#123;<br>        <span class="hljs-type">int</span> j = i;<br>        <span class="hljs-keyword">while</span>(j &lt; n &amp;&amp; str[j] != <span class="hljs-string">&#x27; &#x27;</span>) j++;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = i;k &lt; j;k ++) cout &lt;&lt; str[k];<br>        cout &lt;&lt; endl;<br>        i = j;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="最长连续不重复子序列"><a href="#最长连续不重复子序列" class="headerlink" title="最长连续不重复子序列"></a>最长连续不重复子序列</h2><p><img src="/2023/04/24/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/2023-04-24-19-08-58.png"></p><h3 id="算法思想-1"><a href="#算法思想-1" class="headerlink" title="算法思想"></a>算法思想</h3><p><img src="/2023/04/24/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/2023-04-24-19-03-51.png"><br>※每次都枚举i,j从0开始。<br>※用s[]数组记录当前[j,i]中数的个数，当i前移时时s[a[i]]++，当s[a[i]] &gt; 1时，说明区间内有重复的数，则让s[a[j]]–，然后使j往前移动，重复上述操作。<br>※不重复序列的长度res &#x3D; max(res,i - j + 1)，因为i比j大</p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">int</span> s[N];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n ;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i ++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>,j = <span class="hljs-number">0</span>;i &lt; n;i ++)&#123;<br>        s[a[i]] ++;<br>        <span class="hljs-keyword">while</span>(s[a[i]] &gt; <span class="hljs-number">1</span>)&#123;<br>            s[a[j]] --;<br>            j++;<br>        &#125;<br>        res = <span class="hljs-built_in">max</span>(res,i - j + <span class="hljs-number">1</span>);<br>    &#125;<br>    cout &lt;&lt; res &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><h3 id="求n的二进制表示中的第k位数字"><a href="#求n的二进制表示中的第k位数字" class="headerlink" title="求n的二进制表示中的第k位数字"></a>求n的二进制表示中的第k位数字</h3><h3 id="算法思想-2"><a href="#算法思想-2" class="headerlink" title="算法思想"></a>算法思想</h3><p>※求n的二进制表示中的第k位数字：n &gt;&gt; k &amp; 1</p><p>①先把第k位移到最后一位：n &gt;&gt; k;</p><p>②看个位是几:           x &amp; 1</p><h3 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//n的二进制表示中的第k位数字</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">3</span>;k &gt;= <span class="hljs-number">0</span>;k --)  cout &lt;&lt; (n &gt;&gt; k &amp; <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="返回n的最后一位1"><a href="#返回n的最后一位1" class="headerlink" title="返回n的最后一位1"></a>返回n的最后一位1</h2><h3 id="算法思想-3"><a href="#算法思想-3" class="headerlink" title="算法思想"></a>算法思想</h3><p>※返回n的最后一位1：lowbit(n) -&gt; n &amp; - n<br><img src="/2023/04/24/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/2023-04-24-19-49-36.png"></p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p><img src="/2023/04/24/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/2023-04-24-19-52-00.png"></p><h3 id="完整代码-2"><a href="#完整代码-2" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//二进制数中1的个数</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> x &amp; -x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;                              <span class="hljs-comment">//进行n次查询</span><br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">while</span>(n  --)&#123;<br>        <span class="hljs-type">int</span> x;<br>        cin &gt;&gt; x;                       <span class="hljs-comment">//要查询的数x</span><br>        <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(x) x -= <span class="hljs-built_in">lowbit</span>(x),res ++ ; <span class="hljs-comment">//每次减去x的最后一个1</span><br>        cout &lt;&lt; res &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><h2 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h2><p><img src="/2023/04/24/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/2023-04-26-19-22-00.png"><br>※加1的话，从1开始映射，不加1的话，从0开始映射</p><h3 id="算法思想-4"><a href="#算法思想-4" class="headerlink" title="算法思想"></a>算法思想</h3><p><img src="/2023/04/24/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/2023-04-26-19-23-59.png"><br>1.介绍</p><p>离散化，把无限空间中有限的个体映射到有限的空间中去，以此提高算法的时空效率。通俗的说，离散化是在不改变数据相对大小的条件下，对数据进行相应的缩小。离散化本质上可以看成是一种哈希。<br>2.算法<br><img src="/2023/04/24/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/2023-04-26-19-17-22.png"><br>※unique函数是将数组中所有元素去重，返回去重之后数组的尾端点，使用unique函数必须先排序。<br>※erase函数是删除unique函数返回的尾端点与数组尾端点的值，也就是删除重复元素</p><h3 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h3><p><img src="/2023/04/24/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/2023-04-26-19-26-31.png"></p><h3 id="完整代码-3"><a href="#完整代码-3" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//离散化</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">3e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n ,m;<br><span class="hljs-type">int</span> a[N],s[N];<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; PII;      <br><br>vector&lt;<span class="hljs-type">int</span>&gt; alls;       <span class="hljs-comment">//存的所要离散化的元素</span><br>vector&lt;PII&gt; add,query; <br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>,r = alls.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(l &lt; r)&#123;<br>        <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(alls[mid] &gt;= x) r = mid;<br>        <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> r + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i ++)&#123;<br>        <span class="hljs-type">int</span> x,c;<br>        cin &gt;&gt; x &gt;&gt; c;<br>        add.<span class="hljs-built_in">push_back</span>(&#123;x, c&#125;);<br>        alls.<span class="hljs-built_in">push_back</span>(x);          <span class="hljs-comment">//将x加入到待离散化的数组里面去</span><br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; m;i ++)&#123;<br>        <span class="hljs-type">int</span> l,r;<br>        cin &gt;&gt; l &gt;&gt; r;<br>        query.<span class="hljs-built_in">push_back</span>(&#123;l, r&#125;);<br>        alls.<span class="hljs-built_in">push_back</span>(l);          <span class="hljs-comment">//将左区间加入到待离散化的数组里面去</span><br>        alls.<span class="hljs-built_in">push_back</span>(r);          <span class="hljs-comment">//将右区间加入到待离散化的数组里面去</span><br>    &#125;<br><br>    <span class="hljs-comment">//去重</span><br>    <span class="hljs-built_in">sort</span>(alls.<span class="hljs-built_in">begin</span>(),alls.<span class="hljs-built_in">end</span>());      <span class="hljs-comment">//先排序</span><br>    alls.<span class="hljs-built_in">erase</span>(<span class="hljs-built_in">unique</span>(alls.<span class="hljs-built_in">begin</span>(),alls.<span class="hljs-built_in">end</span>()),alls.<span class="hljs-built_in">end</span>());     <span class="hljs-comment">//去掉重复元素</span><br>    <br>    <span class="hljs-comment">//处理插入</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> item : add)&#123;<br>        <span class="hljs-type">int</span> x = <span class="hljs-built_in">find</span>(item.first);   <span class="hljs-comment">//item.first相当与x</span><br>        a[x] += item.second;        <span class="hljs-comment">//在离散化后的位置加上要加的数  item.second相当于c</span><br>    &#125;<br>   <br>    <span class="hljs-comment">//处理前缀和</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= alls.<span class="hljs-built_in">size</span>();i ++) s[i] = s[i - <span class="hljs-number">1</span>] + a[i];<br>  <br>    <span class="hljs-comment">//处理查询</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> item : query)&#123;<br>        <span class="hljs-type">int</span> l = <span class="hljs-built_in">find</span>(item.first), r = <span class="hljs-built_in">find</span>(item.second);<br>        cout &lt;&lt; s[r] - s[l - <span class="hljs-number">1</span>] &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="区间合并"><a href="#区间合并" class="headerlink" title="区间合并"></a>区间合并</h2><p><img src="/2023/04/24/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/2023-04-26-20-05-30.png"></p><h3 id="算法思想-5"><a href="#算法思想-5" class="headerlink" title="算法思想"></a>算法思想</h3><p>※图解<br><img src="/2023/04/24/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/2023-04-26-20-08-35.png"><br>1.按区间左端点排序<br>2.扫描整个区间，扫描过程中，把所有可能有交集的区间进行合并<br><img src="/2023/04/24/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/2023-04-26-20-41-24.png"></p><h3 id="完整代码-4"><a href="#完整代码-4" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//区间合并</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; PII;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n ;<br>vector&lt;PII&gt; segs;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(vector&lt;PII&gt; &amp;segs)</span></span>&#123;<br>    vector&lt;PII&gt; res;<br>    <span class="hljs-built_in">sort</span>(segs.<span class="hljs-built_in">begin</span>(),segs.<span class="hljs-built_in">end</span>());      <span class="hljs-comment">//对pari，优先以左端点排序，再以右端点排序</span><br>    <span class="hljs-type">int</span> st = <span class="hljs-number">-2e9</span>,ed = <span class="hljs-number">-2e9</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> seg:segs)&#123;<br>        <span class="hljs-keyword">if</span>(ed &lt; seg.first)&#123;<br>            <span class="hljs-keyword">if</span>(st != <span class="hljs-number">-2e9</span>)<br>                res.<span class="hljs-built_in">push_back</span>(&#123;st,ed&#125;);<br>            st = seg.first,ed = seg.second;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            ed = <span class="hljs-built_in">max</span>(ed,seg.second);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(st != <span class="hljs-number">-2e9</span>) res.<span class="hljs-built_in">push_back</span>(&#123;st,ed&#125;);<br>    segs = res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i ++)&#123;<br>        <span class="hljs-type">int</span> l,r;<br>        cin &gt;&gt; l &gt;&gt; r;<br>        segs.<span class="hljs-built_in">push_back</span>(&#123;l,r&#125;);<br>    &#125;<br><br>    <span class="hljs-built_in">merge</span>(segs);<br>    cout &lt;&lt; segs.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法基础</category>
      
      <category>第一章</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第一次习题课</title>
    <link href="/2023/04/23/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B9%A0%E9%A2%98%E8%AF%BE/"/>
    <url>/2023/04/23/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B9%A0%E9%A2%98%E8%AF%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="第K个数-快速选择"><a href="#第K个数-快速选择" class="headerlink" title="第K个数(快速选择)"></a>第K个数(快速选择)</h1><p><img src="/2023/04/23/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B9%A0%E9%A2%98%E8%AF%BE/2023-04-23-21-50-37.png"></p><h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h2><p>🔺快排思想<br>※找到分界点x，q[l],q[(l + r) &gt;&gt; 1],q[r].<br>※左边所有数Left &lt;&#x3D; x,右边所有数Right &gt;&#x3D; x.<br>※递归排序Left，递归排序Right<br>🔺快选思想<br>※找到分界点x，q[l],q[(l + r) &gt;&gt; 1],q[r].<br>※左边所有数Left &lt;&#x3D; x,右边所有数Right &gt;&#x3D; x.<br>※统计x左边所有数的个数S<sub>l</sub>,和右边所有数的个数S<sub>r</sub>.<br>※①当K &lt;&#x3D; S<sub>l</sub>时，则递归左边区间 要查找的个数为S<sub>l</sub><br>※②当K &gt; S<sub>l</sub>时，则递归右边区间 要查找的个数应变为K -  S<sub>l</sub><br>※时间复杂度o(n).</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n,k;<br><span class="hljs-type">int</span> q[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> k)</span></span>&#123;      <span class="hljs-comment">//C++中，局部变量与全局变量重名时，优先使用局部变量</span><br>    <span class="hljs-keyword">if</span> (l == r)                         <span class="hljs-comment">//快排里面必须写&gt;=,而快选2个均可</span><br>        <span class="hljs-keyword">return</span> q[l];                    <span class="hljs-comment">//当递归只剩一个数时，则是要查找的数</span><br>    <span class="hljs-type">int</span> i = l - <span class="hljs-number">1</span>,j = r + <span class="hljs-number">1</span>,x = q[l];<br>    <span class="hljs-keyword">while</span>(i &lt; j)&#123;<br>        <span class="hljs-keyword">do</span> i ++;<span class="hljs-keyword">while</span>(q[i] &lt; x);<br>        <span class="hljs-keyword">do</span> j --;<span class="hljs-keyword">while</span>(q[j] &gt; x);<br>        <span class="hljs-keyword">if</span>(i &lt; j) <span class="hljs-built_in">swap</span>(q[i],q[j]);<br>    &#125;<br>    <span class="hljs-type">int</span> sl = j - l + <span class="hljs-number">1</span>;     <span class="hljs-comment">//左半边区间是[l,j]，右半区间是[j+1,r],所以sl = j - l + 1;</span><br>    <span class="hljs-keyword">if</span>(k &lt;= sl) <span class="hljs-keyword">return</span> <span class="hljs-built_in">quick_sort</span>(l,j,k);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">quick_sort</span>(j+<span class="hljs-number">1</span>,r,k-sl);      <span class="hljs-comment">//整个区间第K小个数，相当于是右半区间第K-sl小个数</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; k ;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i ++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;q[i]);<br>    cout &lt;&lt; <span class="hljs-built_in">quick_sort</span>(<span class="hljs-number">0</span>,n - <span class="hljs-number">1</span>,k) &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="逆序对的数量"><a href="#逆序对的数量" class="headerlink" title="逆序对的数量"></a>逆序对的数量</h1><p><img src="/2023/04/23/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B9%A0%E9%A2%98%E8%AF%BE/2023-04-23-21-51-15.png"></p><h2 id="算法思想-1"><a href="#算法思想-1" class="headerlink" title="算法思想"></a>算法思想</h2><p>🔺归并排序思想<br>※[L,R] &#x3D;&gt; 分为[L,mid],[mid + 1,R]<br>※递归排序[L,mid]和[mid + 1,R]<br>※归并，将左右两个有序序列合并成一个有序序列<br><img src="/2023/04/23/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B9%A0%E9%A2%98%E8%AF%BE/2023-04-23-21-51-39.png"></p><h2 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//逆序对的数量</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> q[N],temp[N];<br><span class="hljs-type">int</span> n;<br><span class="hljs-function">LL <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(l &gt;= r)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    LL res = <span class="hljs-built_in">merge_sort</span>(l,mid) + <span class="hljs-built_in">merge_sort</span>(mid + <span class="hljs-number">1</span>,r);<br>    <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>,i = l,j = mid + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)&#123;<br>        <span class="hljs-keyword">if</span>(q[i] &lt;= q[j])     temp[k ++] = q[i ++];<br>        <span class="hljs-keyword">else</span> &#123;<br>            temp[k ++] = q[j ++];<br>            res += mid - i + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(i &lt;= mid) temp[k ++] = q[i ++];<br>    <span class="hljs-keyword">while</span>(j &lt;= r) temp[k ++] = q[j ++];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = l,j = <span class="hljs-number">0</span>;i &lt;= r;i++,j++)&#123;<br>        q[i] = temp [j];<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n ;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i ++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;q[i]);<br>    cout &lt;&lt; <span class="hljs-built_in">merge_sort</span>(<span class="hljs-number">0</span>,n - <span class="hljs-number">1</span>) &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="数的三次方根"><a href="#数的三次方根" class="headerlink" title="数的三次方根"></a>数的三次方根</h1><p><img src="/2023/04/23/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B9%A0%E9%A2%98%E8%AF%BE/2023-04-23-22-57-45.png"></p><h2 id="算法思想-2"><a href="#算法思想-2" class="headerlink" title="算法思想"></a>算法思想</h2><p>与浮点二分一样 只是判断条件不同而已。</p><h2 id="完整代码-2"><a href="#完整代码-2" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//求数的三次方根</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">double</span> x;<br>    cin &gt;&gt; x;<br>    <span class="hljs-type">double</span> l = <span class="hljs-number">-10000</span>,r = <span class="hljs-number">10000</span>;<br>    <span class="hljs-keyword">while</span>(r - l &gt; <span class="hljs-number">1e-8</span>)&#123;<br>        <span class="hljs-type">double</span> mid = (l + r) / <span class="hljs-number">2</span> ;<br>        <span class="hljs-keyword">if</span>(mid * mid * mid &gt;=x)  r = mid;<br>        <span class="hljs-keyword">else</span> l = mid;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lf\n&quot;</span>,l);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h1><p><img src="/2023/04/23/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B9%A0%E9%A2%98%E8%AF%BE/2023-04-23-23-18-27.png"><br><img src="/2023/04/23/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B9%A0%E9%A2%98%E8%AF%BE/2023-04-23-23-19-58.png"></p><h2 id="算法思想-3"><a href="#算法思想-3" class="headerlink" title="算法思想"></a>算法思想</h2><p>与一维前缀和算法一致</p><h2 id="完整代码-3"><a href="#完整代码-3" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//前缀和</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> a[N],S[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i ++) cin &gt;&gt; a[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i ++) S[i] = S[i - <span class="hljs-number">1</span>] + a[i];<br>    <span class="hljs-keyword">while</span>(m --)&#123;<br>        <span class="hljs-type">int</span> l,r;<br>        cin &gt;&gt; l &gt;&gt; r;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,S[r]-S[l - <span class="hljs-number">1</span>]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="子矩阵的和"><a href="#子矩阵的和" class="headerlink" title="子矩阵的和"></a>子矩阵的和</h1><p><img src="/2023/04/23/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B9%A0%E9%A2%98%E8%AF%BE/2023-04-24-16-05-54.png"></p><h2 id="算法思想-4"><a href="#算法思想-4" class="headerlink" title="算法思想"></a>算法思想</h2><p><img src="/2023/04/23/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B9%A0%E9%A2%98%E8%AF%BE/2023-04-24-15-48-43.png"></p><h2 id="完整代码-4"><a href="#完整代码-4" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//子矩阵的和</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> n,m,q;<br><span class="hljs-type">int</span> a[N][N],s[N][N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;q);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i ++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j &lt;= m;j ++)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i][j]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i ++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j &lt;= m ;j ++)<br>            s[i][j] = s[i - <span class="hljs-number">1</span>][j] + s[i][j - <span class="hljs-number">1</span>] -s[i <span class="hljs-number">-1</span>][j - <span class="hljs-number">1</span>] + a[i][j];<br>    <span class="hljs-keyword">while</span>(q--)&#123;<br>        <span class="hljs-type">int</span> x1,x2,y1,y2;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,s[x2][y2]-s[x1 - <span class="hljs-number">1</span>][y2] - s[x2][y1 - <span class="hljs-number">1</span>] + s[x1 - <span class="hljs-number">1</span>][y1 - <span class="hljs-number">1</span>]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="一维差分"><a href="#一维差分" class="headerlink" title="一维差分"></a>一维差分</h1><p><img src="/2023/04/23/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B9%A0%E9%A2%98%E8%AF%BE/2023-04-24-16-06-11.png"></p><h2 id="算法思想-5"><a href="#算法思想-5" class="headerlink" title="算法思想"></a>算法思想</h2><p><img src="/2023/04/23/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B9%A0%E9%A2%98%E8%AF%BE/2023-04-24-15-58-47.png"><br><img src="/2023/04/23/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B9%A0%E9%A2%98%E8%AF%BE/2023-04-24-16-01-30.png"></p><h2 id="完整代码-5"><a href="#完整代码-5" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 一维差分</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> a[N],b[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> c)</span></span>&#123;<br>    b[l] += c;<br>    b[r + <span class="hljs-number">1</span>] -= c;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i ++) cin &gt;&gt; a[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i ++) <span class="hljs-built_in">insert</span>(i,i,a[i]);<br>    <span class="hljs-keyword">while</span>(m --)&#123;<br>        <span class="hljs-type">int</span> l,r,c;<br>        cin &gt;&gt; l &gt;&gt; r &gt;&gt; c;<br>        <span class="hljs-built_in">insert</span>(l,r,c);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i ++) a[i] = a[i - <span class="hljs-number">1</span>] + b[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n; i ++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,a[i]);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot; &quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="差分矩阵"><a href="#差分矩阵" class="headerlink" title="差分矩阵"></a>差分矩阵</h1><p><img src="/2023/04/23/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B9%A0%E9%A2%98%E8%AF%BE/2023-04-24-16-17-51.png"></p><h2 id="算法思想-6"><a href="#算法思想-6" class="headerlink" title="算法思想"></a>算法思想</h2><p><img src="/2023/04/23/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B9%A0%E9%A2%98%E8%AF%BE/2023-04-24-16-43-13.png"></p><h2 id="完整代码-6"><a href="#完整代码-6" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> n,m,q;<br><span class="hljs-type">int</span> a[N][N],b[N][N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x1,<span class="hljs-type">int</span> y1,<span class="hljs-type">int</span> x2,<span class="hljs-type">int</span> y2,<span class="hljs-type">int</span> c)</span></span>&#123;<br>    b[x1][y1] += c;<br>    b[x1][y2 + <span class="hljs-number">1</span>] -= c;<br>    b[x2 + <span class="hljs-number">1</span>][y1] -= c;<br>    b[x2 + <span class="hljs-number">1</span>][y2 + <span class="hljs-number">1</span>] += c;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;q);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i ++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j &lt;= m;j ++)&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i][j]);<br>            <span class="hljs-built_in">insert</span>(i,j,i,j,a[i][j]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(q--)&#123;<br>        <span class="hljs-type">int</span> x1,y1,x2,y2,c;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d%d&quot;</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2,&amp;c);<br>        <span class="hljs-built_in">insert</span>(x1,y1,x2,y2,c);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i ++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j &lt;= m;j ++)&#123;<br>            a[i][j] = a[i - <span class="hljs-number">1</span>][j] + a[i][j - <span class="hljs-number">1</span>] - a[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + b[i][j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i ++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j &lt;= m;j ++)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,a[i][j]);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法基础</category>
      
      <category>第一章</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>双指针算法</title>
    <link href="/2023/04/22/Pointer/"/>
    <url>/2023/04/22/Pointer/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>前缀和与差分</title>
    <link href="/2023/04/22/Prefix/"/>
    <url>/2023/04/22/Prefix/</url>
    
    <content type="html"><![CDATA[<h1 id="一维前缀和"><a href="#一维前缀和" class="headerlink" title="一维前缀和"></a>一维前缀和</h1><h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h2><font color = e02b70 size = 4>1.数组从a1，a2...a存储，前缀和的定义为S<sub>i</sub>=a<sub>1</sub>+a<sub>2</sub>+...+a<sub>i</sub>\2.求S<sub>i</sub>\设置S<sub>0</sub> = 0.通过循环，S<sub>i</sub> = S<sub>i-1</sub>+a<sub>i</sub>，即可求出每个S<sub>i</sub>的值3.求区间[l,r]的值x\利用x = S<sub>i</sub>-S<sub>i-1</sub>，即可求出答案。</font><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> +<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> q[N],S[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i ++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;q[i]);<br>    S[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i ++) S[i] = S[i<span class="hljs-number">-1</span>] + q[i];            <span class="hljs-comment">//前缀和的初始化</span><br>    <span class="hljs-keyword">while</span>(m--)&#123;<br>        <span class="hljs-type">int</span> l,r;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;l,&amp;r);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,S[r] - S[l - <span class="hljs-number">1</span>]);                   <span class="hljs-comment">//区间和的计算</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h1><h2 id="算法思想-1"><a href="#算法思想-1" class="headerlink" title="算法思想"></a>算法思想</h2><font color = e02b70 size = 4>1.数组存储在二位数组中 前缀和为S<sub>i</sub><sub>j</sub>，即包含在这个面积里面数的总和\2.求S<sub>i</sub><sub>j</sub>\计算公式S<sub>i</sub><sub>j</sub> = S<sub>i-1</sub><sub>j</sub> + S<sub>i</sub><sub>j-1</sub> + a<sub>i</sub><sub>j</sub>;初始化S[0][0] = 0,通过2层for循环即可求出S[i][j]的值。3.求子矩阵(x1,y1)到(x2,y2)的值x\x = S[x2][y2] - S[x1 - 1][y2]-S[x2][y1 - 1] + S[x1 - 1][y1 - 1]</font><h2 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> n,m,q;<br><span class="hljs-type">int</span> a[N][N],S[N][N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;q);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i ++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j &lt;= m;j ++)&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i][j]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i ++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j &lt;= m;j ++)&#123;<br>            S[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>            S[i][j] = S[i - <span class="hljs-number">1</span>][j] + S[i][j - <span class="hljs-number">1</span>] + a[i][j];          <span class="hljs-comment">//求前缀和</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(q--)&#123;<br>        <span class="hljs-type">int</span> x1,y1,x2,y2;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,S[x2][y2]-S[x1 - <span class="hljs-number">1</span>][y2]-S[x2][y1 - <span class="hljs-number">1</span>] + S[x1 - <span class="hljs-number">1</span>][y1 - <span class="hljs-number">1</span>]);   <span class="hljs-comment">//算子矩阵的和</span><br><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="一维差分-前缀和的逆运算"><a href="#一维差分-前缀和的逆运算" class="headerlink" title="一维差分(前缀和的逆运算)"></a>一维差分(前缀和的逆运算)</h1><h2 id="算法思想-2"><a href="#算法思想-2" class="headerlink" title="算法思想"></a>算法思想</h2><font color = e02b70 size = 4>1.数组a[1],a[2]...a[n]，构造数组b[1],b[2]...b[n]使得a[i] = b[1] + b[2] + ... +b[i]此时a为b的前缀和，b为a的差分。<p>2.要让a[l]到a[r]中的每个数都+c也就是a[l] + c,a[l + 1] + c,…,a[r] + c<br>3.那么当b[l] + c时，a[l]至a[r]都会+c，并且a[r+1]到a[n]都会+c。<br>为了使a[r+1]到a[n]不能+c，则令b[r + 1] - c,即可做到。<br>※数据初始化时，令数组a与数组b中的元素都是0，然后再利用上面的性质，也就是数组b在[i,i]中插入要输入的数值a[i]，这样就完成了数组b的初始化过程。所以要设一个insert插入函数，在[l，r]中插入数据c，也就是b[l] +&#x3D; c,b[r + 1] -&#x3D; c。</font></p><h2 id="完整代码-2"><a href="#完整代码-2" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//一维差分</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> +<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> a[N],b[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> c)</span></span>&#123;<br>    b[l] += c;<br>    b[r + <span class="hljs-number">1</span>] -= c;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i ++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i ++) <span class="hljs-built_in">insert</span>(i,i,a[i]);        <span class="hljs-comment">//相当于在初始化数组</span><br>    <span class="hljs-keyword">while</span>(m--)&#123;<br>        <span class="hljs-type">int</span> l,r,c;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;l,&amp;r,&amp;c);<br>        <span class="hljs-built_in">insert</span>(l,r,c);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i ++) b[i] += b[i - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i ++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\t&quot;</span>,b[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><font color = e02b70 size = 4>1.最开始时就假设了数组a与数组b中的元素都为0，也就是满足了上述数组a与数组b的关系<p>2.然后为了改变数组a中的值也就是改变数组b的值，也就是用插入函数改变b数组元素的值，最后求b数组的前缀和也就是求出了a数组。</p><h1 id="二维差分"><a href="#二维差分" class="headerlink" title="二维差分"></a>二维差分</h1><h2 id="算法思想-3"><a href="#算法思想-3" class="headerlink" title="算法思想"></a>算法思想</h2><p>1.与一维差分相似，初始时数组a与数组b中的元素值全为0，即构造出了符合数组a与数组b关系的数组<br>2.书写更新b数组的inert()函数,假设在[x1,y1][x2,y2]的子矩阵中的每个元素都+c<br>则更新的函数insert()函数为:<br>b[x1][y1] +&#x3D;c<br>b[x2 + 1][y1] -&#x3D; c<br>b[x1][y2 + 1] -&#x3D; c<br>b[x2 + 1][y2 + 1] +&#x3D; c<br>3.然后就是接收a数组元素的值，然后根据a数组改变b数组的值，利用insert()函数改变<br>4.最后求出b数组的前缀和也就是要求的答案了.<br></font></p><h2 id="完整代码-3"><a href="#完整代码-3" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> a[N][N];<br><span class="hljs-type">int</span> b[N][N];<br><span class="hljs-type">int</span> n,m,p;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x1,<span class="hljs-type">int</span> y1,<span class="hljs-type">int</span> x2,<span class="hljs-type">int</span> y2,<span class="hljs-type">int</span> c)</span></span>&#123;<br>    b[x1][y1] += c;<br>    b[x2 + <span class="hljs-number">1</span>][y1] -= c;<br>    b[x1][y2 + <span class="hljs-number">1</span>] -= c;<br>    b[x2 + <span class="hljs-number">1</span>][y2 + <span class="hljs-number">1</span>] += c;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;p);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i ++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j &lt;= m;j ++)&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i][j]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i ++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j &lt;= m;j ++)&#123;<br>            <span class="hljs-built_in">insert</span>(i,j,i,j,a[i][j]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(p--)&#123;<br>        <span class="hljs-type">int</span> x1,y1,x2,y2,c;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d%d&quot;</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2,&amp;c);<br>        <span class="hljs-built_in">insert</span>(x1,y1,x2,y2,c);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i ++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j &lt;= m;j ++)&#123;<br>            b[i][j] += b[i - <span class="hljs-number">1</span>][j] + b[i][j - <span class="hljs-number">1</span>] -b[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i ++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j &lt;= m;j ++)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,b[i][j]);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><font color = e02b70 size = 4>※差分不需要考虑如何去构造函数，因为在最初就假设了数组a与数组b中的元素值全为0，也就符合了b是a的差分，而a是b的前缀和<p>※所以最终就是要求更新函数,也就是inert()函数！！！<br></font></p>]]></content>
    
    
    <categories>
      
      <category>算法基础</category>
      
      <category>第一章</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>高精度</title>
    <link href="/2023/04/20/Highprecision/"/>
    <url>/2023/04/20/Highprecision/</url>
    
    <content type="html"><![CDATA[<h1 id="高精度（加、减、乘、除）"><a href="#高精度（加、减、乘、除）" class="headerlink" title="高精度（加、减、乘、除）"></a>高精度（加、减、乘、除）</h1><h2 id="高精度加法"><a href="#高精度加法" class="headerlink" title="高精度加法"></a>高精度加法</h2><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p>1.将高精度数用字符串表示string a，b，再用vector用数组表示vector<int> A,B，再调用push_back方法逆序存储，存储由低位向高位存储，这样进位时方便存储，即原始数为”123456”,则存储在数组中的值为[6,5,4,3,2,1].<br>2.设置进位t 本位的值等于(t + A[i] + B[i])%10<br>然后传给下一位的进位为 t &#x3D; (t + A[i] + B[i])&#x2F;10<br>3.如果处理完 最后进位t存在的话，则将数组最后以为置1\</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//C = A + B  大整数加法</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">add</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A,vector&lt;<span class="hljs-type">int</span>&gt; &amp;B)</span></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;          <span class="hljs-comment">//进位</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; A.<span class="hljs-built_in">size</span>() || i &lt; B.<span class="hljs-built_in">size</span>();i ++)&#123;<br>        <span class="hljs-keyword">if</span>(i &lt; A.<span class="hljs-built_in">size</span>()) t += A[i];<br>        <span class="hljs-keyword">if</span>(i &lt; B.<span class="hljs-built_in">size</span>()) t += B[i];             <span class="hljs-comment">//t = t + a[i] + b[i]</span><br>        C.<span class="hljs-built_in">push_back</span>(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(t) C.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    string a,b;<br>    vector&lt;<span class="hljs-type">int</span>&gt; A,B;<br>    cin &gt;&gt; a &gt;&gt; b;  <span class="hljs-comment">//a = &quot;123456&quot;</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = a.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;i &gt;= <span class="hljs-number">0</span>;i --) A.<span class="hljs-built_in">push_back</span>(a[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<span class="hljs-comment">//A = [6,5,4,3,2,1,]</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = b.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;i &gt;= <span class="hljs-number">0</span>;i --) B.<span class="hljs-built_in">push_back</span>(b[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-keyword">auto</span> C = <span class="hljs-built_in">add</span>(A,B);                  <span class="hljs-comment">//自动返回对应的类型也就是vector&lt;int&gt;</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = C.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;i &gt;= <span class="hljs-number">0</span>;i--) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,C[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="代码模板"><a href="#代码模板" class="headerlink" title="代码模板"></a>代码模板</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">add</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A,vector&lt;<span class="hljs-type">int</span>&gt; &amp;B)</span></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;          <span class="hljs-comment">//进位</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; A.<span class="hljs-built_in">size</span>() || i &lt; B.<span class="hljs-built_in">size</span>();i ++)&#123;<br>        <span class="hljs-keyword">if</span>(i &lt; A.<span class="hljs-built_in">size</span>()) t += A[i];<br>        <span class="hljs-keyword">if</span>(i &lt; B.<span class="hljs-built_in">size</span>()) t += B[i];             <span class="hljs-comment">//t = t + a[i] + b[i]</span><br>        C.<span class="hljs-built_in">push_back</span>(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(t) C.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="高精度减法"><a href="#高精度减法" class="headerlink" title="高精度减法"></a>高精度减法</h2><h3 id="算法思想-1"><a href="#算法思想-1" class="headerlink" title="算法思想"></a>算法思想</h3><ol><li>需先判断A与B的大小，因为如果A比B小的话，相减为负数，则应转换为-(B-A),设置cmp()函数，进行两个数之间的大小比较\</li><li>设置来自低位的借位t，先进行t &#x3D; A[i] - t(每次都要减去来自上一位的借位),判断此时B[i]是否有数，若有的话则，t &#x3D; t - b[i]；此时本位的值为(t + 10) % 10; 如果此时t &lt; 0,则说明要向上以为借1，则此时令t &#x3D; 1；否则的话t &#x3D; 0，重复上述操作，直到遍历完数组A中所有的数\</li><li>得到的结果可能存在高位有0的前导0现象。要做的处理就是将高位为0的数全部弹出，最多只保留1位位0.\</li></ol><h2 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//C = A - B  大整数减法</span><br><span class="hljs-comment">//判断是否有 A&gt;-=B</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A,vector&lt;<span class="hljs-type">int</span>&gt; &amp;B)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(A.<span class="hljs-built_in">size</span>() != B.<span class="hljs-built_in">size</span>()) <span class="hljs-keyword">return</span> A.<span class="hljs-built_in">size</span>() &gt; B.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = A.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;i &gt;= <span class="hljs-number">0</span> ;i--)<br>        <span class="hljs-keyword">if</span>(A[i] != B[i])<br>            <span class="hljs-keyword">return</span> A[i] &gt; B[i];<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sub</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A,vector&lt;<span class="hljs-type">int</span>&gt; &amp;B)</span></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>,t = <span class="hljs-number">0</span>;i &lt; A.<span class="hljs-built_in">size</span>();i ++)&#123;<br>        t = A[i] - t;<br>        <span class="hljs-keyword">if</span>(i &lt; B.<span class="hljs-built_in">size</span>()) t -= B[i];             <span class="hljs-comment">//t = t + a[i] + b[i]</span><br>        C.<span class="hljs-built_in">push_back</span>((t + <span class="hljs-number">10</span>) % <span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">if</span>(t &lt; <span class="hljs-number">0</span>)  t = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> t = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(C.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; C.<span class="hljs-built_in">back</span>() == <span class="hljs-number">0</span>) C.<span class="hljs-built_in">pop_back</span>();  <span class="hljs-comment">//去掉前导0</span><br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    string a,b;<br>    vector&lt;<span class="hljs-type">int</span>&gt; A,B;<br>    cin &gt;&gt; a &gt;&gt; b;  <span class="hljs-comment">//a = &quot;123456&quot;</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = a.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;i &gt;= <span class="hljs-number">0</span>;i --) A.<span class="hljs-built_in">push_back</span>(a[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<span class="hljs-comment">//A = [6,5,4,3,2,1,]</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = b.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;i &gt;= <span class="hljs-number">0</span>;i --) B.<span class="hljs-built_in">push_back</span>(b[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">cmp</span>(A,B))&#123;<br>        <span class="hljs-keyword">auto</span> C = <span class="hljs-built_in">sub</span>(A,B);<span class="hljs-comment">//自动返回对应的类型也就是vector&lt;int&gt;</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = C.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;i &gt;= <span class="hljs-number">0</span>;i--) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,C[i]);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">auto</span> C = <span class="hljs-built_in">sub</span>(B,A);<span class="hljs-comment">//自动返回对应的类型也就是vector&lt;int&gt;</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = C.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;i &gt;= <span class="hljs-number">0</span>;i--) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,C[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="模板代码"><a href="#模板代码" class="headerlink" title="模板代码"></a>模板代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//C = A - B  大整数减法</span><br><span class="hljs-comment">//判断是否有 A&gt;-=B</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A,vector&lt;<span class="hljs-type">int</span>&gt; &amp;B)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(A.<span class="hljs-built_in">size</span>() != B.<span class="hljs-built_in">size</span>()) <span class="hljs-keyword">return</span> A.<span class="hljs-built_in">size</span>() &gt; B.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = A.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;i &gt;= <span class="hljs-number">0</span> ;i--)<br>        <span class="hljs-keyword">if</span>(A[i] != B[i])<br>            <span class="hljs-keyword">return</span> A[i] &gt; B[i];<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sub</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A,vector&lt;<span class="hljs-type">int</span>&gt; &amp;B)</span></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>,t = <span class="hljs-number">0</span>;i &lt; A.<span class="hljs-built_in">size</span>();i ++)&#123;<br>        t = A[i] - t;<br>        <span class="hljs-keyword">if</span>(i &lt; B.<span class="hljs-built_in">size</span>()) t -= B[i];             <span class="hljs-comment">//t = t + a[i] + b[i]</span><br>        C.<span class="hljs-built_in">push_back</span>((t + <span class="hljs-number">10</span>) % <span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">if</span>(t &lt; <span class="hljs-number">0</span>)  t = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> t = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(C.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; C.<span class="hljs-built_in">back</span>() == <span class="hljs-number">0</span>) C.<span class="hljs-built_in">pop_back</span>();  <span class="hljs-comment">//去掉前导0</span><br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="高精度乘法"><a href="#高精度乘法" class="headerlink" title="高精度乘法"></a>高精度乘法</h2><h3 id="算法思想-2"><a href="#算法思想-2" class="headerlink" title="算法思想"></a>算法思想</h3><ol><li>算法的主要思想就是将A[i]中每位数都与b相乘，判断其余数（就是C[i]）,而商就是进位，多次循环即可求出结果\</li><li>设置进位t，如果此时A[i]中还有数的话 则t &#x3D; t + A[i] * b,C[i] 就等于 t % 10，产生的下一位进t &#x3D; t &#x2F; 10；重复上诉操作，循环的条件是A[i]没有遍历完，或者t还存在不为0\</li></ol><h2 id="完整代码-2"><a href="#完整代码-2" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//C = A * b  大整数乘法</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">mul</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A,<span class="hljs-type">int</span> b)</span></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; A.<span class="hljs-built_in">size</span>() || t;i ++)&#123;<br>        <span class="hljs-keyword">if</span>(i &lt; A.<span class="hljs-built_in">size</span>()) t += A[i] * b;<br>        C.<span class="hljs-built_in">push_back</span>(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    string a;<br>    <span class="hljs-type">int</span> b;<br>    cin &gt;&gt; a &gt;&gt; b;<br>    vector&lt;<span class="hljs-type">int</span>&gt; A;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = a.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i &gt;=<span class="hljs-number">0</span>;i --) A.<span class="hljs-built_in">push_back</span>(a[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-keyword">auto</span> C = <span class="hljs-built_in">mul</span>(A, b);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = C.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;i &gt;= <span class="hljs-number">0</span>;i --) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,C[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="模板代码-1"><a href="#模板代码-1" class="headerlink" title="模板代码"></a>模板代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//C = A * b  大整数乘法</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">mul</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A,<span class="hljs-type">int</span> b)</span></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; A.<span class="hljs-built_in">size</span>() || t;i ++)&#123;<br>        <span class="hljs-keyword">if</span>(i &lt; A.<span class="hljs-built_in">size</span>()) t += A[i] * b;<br>        C.<span class="hljs-built_in">push_back</span>(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="高精度除法"><a href="#高精度除法" class="headerlink" title="高精度除法"></a>高精度除法</h2><h3 id="算法思想-3"><a href="#算法思想-3" class="headerlink" title="算法思想"></a>算法思想</h3><ol><li>除法与前面三种算法不同，除法是从最高位开始进行计算的，所以在循环的条件i是从A.size() - 1开始。\</li><li>r为余数，进入循环时r &#x3D; r*10 +A[i],则此时的商为r &#x2F; b也就是C,则此时的余数为r &#x3D; r % b.循环上述操作直到遍历完A[]中所有的数。\</li><li>因为此时C[]中的数是由高位到地位的，所以要调用reverse()方法，将其倒置，以保证其输出方式与前面三种算法相同\</li><li>同时该算法也存在前导0的问题，与前面算法的处理相同。\</li></ol><h2 id="完整代码-3"><a href="#完整代码-3" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// A / b 商是c，余数是r</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">div</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> &amp;r)</span></span>&#123;           <span class="hljs-comment">//r是引用</span><br>    vector&lt;<span class="hljs-type">int</span>&gt; C;          <span class="hljs-comment">//商</span><br>    r = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = A.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;i &gt;= <span class="hljs-number">0</span>;i --)&#123;<br>        r = r * <span class="hljs-number">10</span> + A[i];<br>        C.<span class="hljs-built_in">push_back</span>(r / b);<br>        r %= b;<br>    &#125;<br>    <span class="hljs-built_in">reverse</span>(C.<span class="hljs-built_in">begin</span>(),C.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">while</span>(C.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; C.<span class="hljs-built_in">back</span>() == <span class="hljs-number">0</span>) C.<span class="hljs-built_in">pop_back</span>();<br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    string a;<br>    <span class="hljs-type">int</span> b;<br>    cin &gt;&gt; a &gt;&gt; b;<br>    vector&lt;<span class="hljs-type">int</span>&gt; A;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = a.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i &gt;=<span class="hljs-number">0</span>;i --) A.<span class="hljs-built_in">push_back</span>(a[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-type">int</span> r;<br>    <span class="hljs-keyword">auto</span> C = <span class="hljs-built_in">div</span>(A, b, r);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = C.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;i &gt;= <span class="hljs-number">0</span>;i --) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,C[i]);<br>    cout &lt;&lt; endl;<br>    cout &lt;&lt; r &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="模板代码-2"><a href="#模板代码-2" class="headerlink" title="模板代码"></a>模板代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// A / b 商是c，余数是r</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">div</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> &amp;r)</span></span>&#123;           <span class="hljs-comment">//r是引用</span><br>    vector&lt;<span class="hljs-type">int</span>&gt; C;          <span class="hljs-comment">//商</span><br>    r = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = A.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;i &gt;= <span class="hljs-number">0</span>;i --)&#123;<br>        r = r * <span class="hljs-number">10</span> + A[i];<br>        C.<span class="hljs-built_in">push_back</span>(r / b);<br>        r %= b;<br>    &#125;<br>    <span class="hljs-built_in">reverse</span>(C.<span class="hljs-built_in">begin</span>(),C.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">while</span>(C.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; C.<span class="hljs-built_in">back</span>() == <span class="hljs-number">0</span>) C.<span class="hljs-built_in">pop_back</span>();<br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法基础</category>
      
      <category>第一章</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第二章JSP语法</title>
    <link href="/2023/04/20/2-Jsp/"/>
    <url>/2023/04/20/2-Jsp/</url>
    
    <content type="html"><![CDATA[<h1 id="JSP语法"><a href="#JSP语法" class="headerlink" title="JSP语法"></a><font color = pink size = 8>JSP语法</font></h1><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a><font color = pink size = 7>主要内容</font></h2><p> <font color = orange size = 6>一：JSP页面的基本结构<br>二：声明变量和定义方法<br>三：Java程序片<br> 四：Java表达式<br>五：JSP中的注释<br>六：JSP指令标记<br>七：JSP动作标记</font></p><h3 id="一：JSP页面的基本结构"><a href="#一：JSP页面的基本结构" class="headerlink" title="一：JSP页面的基本结构"></a><font color = 3fccca size = 5>一：JSP页面的基本结构</font></h3><h4 id="1-1一个JSP页面可由5中元素组合而成："><a href="#1-1一个JSP页面可由5中元素组合而成：" class="headerlink" title="1.1一个JSP页面可由5中元素组合而成："></a><font color = 81cc3f size = 4>1.1一个JSP页面可由5中元素组合而成：</font></h4><p>①普通的HTML标记和JavaScript标记<br>②JSP标记，如指令标记、动作标记<br>③变量和方法的声明<br>④Java程序片<br>⑤Java表达式<br><strong>1.2原理</strong><br>①一个JSP页面被第一次请求执行时，Tomcat服务器首先将JSP页面文件转译成一个Java文件，再将这个Java文件编译生成字节码文件，然后通过执行字节码文件响应用户的请求。<br>②当多个用户请求一个JSP页面时，Tomcat服务器为每个用户启动一个线程，该线程负责执行常驻内存的字节码文件来响应相应用户的请求。这些线程由Tomcat服务器来管理，将CPU的使用权在各个线程之间快速切换，以保证每个线程都有机会执行字节码文件。</p><h3 id="二：声明变量和定义方法"><a href="#二：声明变量和定义方法" class="headerlink" title="二：声明变量和定义方法"></a><font color = 3fccca size = 5><strong>二：声明变量和定义方法</strong></font></h3><h4 id="2-1声明变量"><a href="#2-1声明变量" class="headerlink" title="2.1声明变量 "></a><font color = 81cc3f size = 4>2.1声明变量 </font></h4><p>①&lt;%! ….%&gt; **(&lt;%! 之间不能有空格)**  <br>在&lt;%!和%&gt;标记符号之间声明变量，定义方法以及定义类。&lt;%!和%&gt;标记符号的内容习惯上放在JSP 页面指令之后，&lt;HTML&gt;之前，也可以写在&lt;HTML&gt;与&lt;&#x2F;HTML&gt;之间。<br>&lt;%!和%&gt;之间声明的变量在<font color=red><strong>整个JSP页面内都有效</strong></font>，与标记符在JSP页面中所在的书写位置无关，但习惯上把&lt;%!、%&gt; 标记符写在JSP页面的前面。</p><h4 id="2-2定义方法"><a href="#2-2定义方法" class="headerlink" title="2.2定义方法 "></a><font color = 81cc3f size = 4>2.2定义方法 </font></h4><p>对于在“&lt;%!”和“%&gt;”标记符号之间定义方法，可以在Java程序片中调用该方法。<font color = ef3498>方法内声明的变量只在该方法内有效，当方法被调用时，方法内声明的变量被分配内存，方法被调用完毕即可释放这些变量所占的内存。</font>可以在“&lt;%!”和“%&gt;”标记符号之间<font color=red><strong>定义类</strong></font>，可以在Java程序片中使用该类创建对象。<br><strong>注意</strong> <br><font color = ef3498><br>1.Tomcat服务器将JSP页面转译成Java 文件时，将“&lt;%!”、“%&gt;” 标记符之间声明的变量作为类的成员变量，这些变量占有的内存空间直到Tomcat服务器关闭才释放<br>2.当多个用户请求一个JSP页面时，Tomcat服务器为每个用户启动一个线程，这些线程由Tomcat服务器来管理，这些线程共享JSP页面的成员变量，因此任何一个用户对JSP页面成员变量操作的结果，都会影响到其他用户。</font><br><font color = 41ec52 size = 4>代码举例</font></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ <span class="hljs-type">page</span> <span class="hljs-variable">contentType</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;text/html&quot;</span>%&gt;<br>&lt;%@ page pageEncoding=<span class="hljs-string">&quot;utf-8&quot;</span>%&gt;<br>&lt;HTML&gt;&lt;body bgcolor=#ffccff&gt;<br>&lt;p style=<span class="hljs-string">&quot;font-family:宋体,font-size:36;color:blue&quot;</span>&gt;<br>&lt;%! <br>    <span class="hljs-type">double</span> <span class="hljs-title function_">multi</span><span class="hljs-params">(<span class="hljs-type">double</span> x,<span class="hljs-type">double</span> y)</span>&#123;  <span class="hljs-comment">//定义方法</span><br>        <span class="hljs-keyword">return</span> x*y;<br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span>&#123;<br>        <span class="hljs-type">double</span> r;<br>        <span class="hljs-type">double</span> <span class="hljs-title function_">getArea</span><span class="hljs-params">()</span>&#123;             <span class="hljs-comment">//定义类</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">3.14</span>*r*r;<br>        &#125;<br>    &#125;<br>%&gt; <br>&lt;%                                   <span class="hljs-comment">//Java程序片</span><br>    <span class="hljs-type">double</span> x=<span class="hljs-number">8.0</span>;<br>    <span class="hljs-type">double</span> y=<span class="hljs-number">12.0</span>;<br>    out.print(multi(x,y));           <span class="hljs-comment">//调用方法</span><br>    Circle circle=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle</span>();<br>    circle.r=<span class="hljs-number">3.0</span>;                    <br>    out.print(circle.getArea());     <span class="hljs-comment">//调用类</span><br>%&gt;<br>&lt;/p&gt;&lt;/body&gt;&lt;/HTML&gt;<br></code></pre></td></tr></table></figure><h3 id="三：Java程序片"><a href="#三：Java程序片" class="headerlink" title="三：Java程序片"></a><font color = 3fccca size = 5><strong>三：Java程序片</strong></font></h3><h4 id="3-1插入程序片"><a href="#3-1插入程序片" class="headerlink" title="3.1插入程序片"></a><font color = 81cc3f size = 4>3.1插入程序片</font></h4><p>可以在&lt;%和%&gt;之间插入Java 程序片。</p><h4 id="3-2局部变量"><a href="#3-2局部变量" class="headerlink" title="3.2局部变量 "></a><font color = 81cc3f size = 4>3.2局部变量 </font></h4><p>一个JSP页面可以有许多程序片，这些程序片将被Tomcat服务器按顺序执行。在程序片中声明的变量称作JSP页面的局部变量。局部变量的有效范围与其声明的位置有关，即局部变量在JSP页面后继的所有程序片以及表达式部分内都有效。</p><h4 id="3-3处理程序片"><a href="#3-3处理程序片" class="headerlink" title="3.3处理程序片 "></a><font color = 81cc3f size = 4>3.3处理程序片 </font></h4><p>当多个用户请求一个JSP页面时，Tomcat服务器为每个用户启动一个线程，该线程负责执行字节码文件响应用户的请求。Tomcat服务器使用多线程来处理程序片.</p><h4 id="3-4操作JSP页面的成员变量"><a href="#3-4操作JSP页面的成员变量" class="headerlink" title="3.4操作JSP页面的成员变量 "></a><font color = 81cc3f size = 4>3.4操作JSP页面的成员变量 </font></h4><p>Java 程序片中操作的成员变量是各个线程（用户）共享的变量，任何一个线程对JSP页面成员变量操作的结果，都会影响到其他线程。</p><h4 id="3-5操调用JSP页面的方法"><a href="#3-5操调用JSP页面的方法" class="headerlink" title="3.5操调用JSP页面的方法 "></a><font color = 81cc3f size = 4>3.5操调用JSP页面的方法 </font></h4><p>Java 程序片中可以出现方法调用语句，所调用的方法必须是JSP页面曾定义的方法。</p><h4 id="3-6操作局部变量"><a href="#3-6操作局部变量" class="headerlink" title="3.6操作局部变量 "></a><font color = 81cc3f size = 4>3.6操作局部变量 </font></h4><p>当一个线程享用CPU资源时，Tomcat服务器让该线程执行Java程序片，这时，Java程序片中的局部变量被分配内存空间，当轮到另一个线程享用CPU资源时，Tomcat服务器让该线程再次执行Java程序片，那么，Java程序片中的局部变量会再次分配内存空间。也就是说Java程序片已经被执行了两次，分别运行在不同的线程中，即运行在不同的时间片内。运行在不同线程中的Java程序片的局部变量互不干扰，即一个用户改变Java程序片中的局部变量的值不会影响其他用户的Java程序片中的局部变量。当一个线程将Java程序片执行完毕，运行在该线程中的Java程序片的局部变量释放所占的内存。</p><h3 id="四：Java表达式"><a href="#四：Java表达式" class="headerlink" title="四：Java表达式"></a><font color = 3fccca size = 5><strong>四：Java表达式</strong></font></h3><h4 id="4-1表达式"><a href="#4-1表达式" class="headerlink" title="4.1表达式"></a><font color = 81cc3f size = 4>4.1表达式</font></h4><p>可以在&lt;%&#x3D;和%&gt;之间插入一个可求值的表达式（注意：不可插入语句，&lt;%&#x3D;是一个完整的符号，“&lt;%”和“&#x3D;”之间不要有空格）。表达式的值由服务器负责计算，并将计算结果用字符串形式发送到用户端显示。<br>Java表达式可以写在&lt;HTML&gt;之前，也可以写在&lt;HTML&gt;和&lt;&#x2F;HTML&gt;之间或&lt;&#x2F;HTML&gt;之后。</p><h4 id="4-2注意事项"><a href="#4-2注意事项" class="headerlink" title=" 4.2注意事项"></a><font color = 81cc3f size = 4> 4.2注意事项</font></h4><p>在JSP页面中，表达式的值被表示成一个字符串的形式，即Tomcat服务器将表达式的结果转换成字符串，然后发送给用户的浏览器。因此，在编写JSP页面时，要把Java表达式按普通的文本来使用。</p><h3 id="五：JSP中的注释"><a href="#五：JSP中的注释" class="headerlink" title="五：JSP中的注释"></a><font color = 3fccca size = 5><strong>五：JSP中的注释</strong></font></h3><h4 id="5-1HTML注释"><a href="#5-1HTML注释" class="headerlink" title="5.1HTML注释"></a><font color = 81cc3f size = 4>5.1HTML注释</font></h4><p>&lt;!–    注释内容     –&gt;<br>JSP引擎把HTML注释交给用户，因此用户通过浏览器查看JSP页面的源文件时，能够看到HTML注释。</p><h4 id="5-2JSP注释"><a href="#5-2JSP注释" class="headerlink" title="5.2JSP注释"></a><font color = 81cc3f size = 4>5.2JSP注释</font></h4><p>在标记符号“&lt;%–”和“–%&gt;”之间加入注释内容：<br>&lt;%–  注释内容  –%&gt;  <br>Tomcat服务器忽略JSP注释，即在编译JSP页面时忽略JSP注释。</p><h3 id="六：JSP指令标记"><a href="#六：JSP指令标记" class="headerlink" title="六：JSP指令标记"></a><font color = 3fccca size = 5><strong>六：JSP指令标记</strong></font></h3><h4 id="6-1page指令标记"><a href="#6-1page指令标记" class="headerlink" title="6.1page指令标记"></a><font color = 81cc3f size = 4>6.1page指令标记</font></h4><p>page 指令用来定义整个JSP页面的一些属性和这些属性的值。<br>&lt;%@ page   属性1&#x3D;”属性1的值”  %&gt;<br>&lt;%@ page   属性2&#x3D;”属性2的值”  %&gt;<br>… …<br>&lt;%@ page   属性n&#x3D;”属性n的值”  %&gt;<br>也可以用一个page指令指定多个属性的值，如：<br>&lt;%@ page   属性1&#x3D;”属性1的值”  属性2&#x3D; “属性2的值”  ……%&gt;<br>page 指令标记可以指定属性：contentType、import、language、session、buffer、auotFlush 、isThreadSafe、pageEncoding 、inform的值</p><h4 id="6-2contentType属性"><a href="#6-2contentType属性" class="headerlink" title="6.2contentType属性"></a><font color = 81cc3f size = 4>6.2contentType属性</h4></font> JSP页面设置响应的MIME（Multipurpose Internet Mail Extention）类型，即设置contentType 属性的值。contentType属性值确定JSP页面响应的MIME类型。属性值的一般形式是： "MIME类型"<p>例如：&lt;%@ page contentType&#x3D;”text&#x2F;html “ %&gt;<br>浏览器启用HTML解析器来解析执行所接收到的信息。<br>如果希望用户的浏览器启用本地的MS-Word应用程序来解析执行收到的信息，就可以如下设置contentType属性的值：&lt;%@ page contentType&#x3D;”application&#x2F;msword” %&gt;</p><h4 id="6-3pageEncoding属性"><a href="#6-3pageEncoding属性" class="headerlink" title="6.3pageEncoding属性"></a><font color = 81cc3f size = 4>6.3pageEncoding属性</h4></font> 只能为pageEncoding指定一个值，不允许两次使用page指令给pageEncoding属性指定不同的或相同的属性值。\例如：<%@ page pageEncoding = "utf-8" %>那么保存JSP页面应当将“编码”选择为“utf-8”.<h4 id="6-4language属性"><a href="#6-4language属性" class="headerlink" title="6.4language属性"></a><font color = 81cc3f size = 4>6.4language属性</font></h4><p>language属性定义JSP页面使用的脚本语言，该属性的值目前只能取”java”。<br>为language属性指定值的格式是：<br>&lt;%@ page  language&#x3D;”java” %&gt;<br>language属性的默认值是”java”，即如果在JSP页面中没有使用page指令指定该属性的值的，那么，JSP页面默认有如下的page指令：&lt;%@ page  language&#x3D;”java” %&gt;</p><h4 id="6-5import-属性"><a href="#6-5import-属性" class="headerlink" title="6.5import 属性"></a><font color = 81cc3f size = 4>6.5import 属性</font></h4><p>该属性的作用是为JSP页面引入Java运行环境提供的包中的类。<br>例如：<br>&lt;%@ page  import&#x3D;”java.io.<em>“, “java.time.LocalDate” %&gt;<br>&lt;%@ page  import&#x3D;”java.util.*” %&gt;<br>&lt;%@ page  import&#x3D;”java.io.*”  %&gt;<br>JSP页面默认import属性已经有如下的值：<br>“ java.lang.</em>“、 “javax.servlet.<em>“、”javax.servlet.jsp.</em>“、”javax.servlet.http.*”。</p><h4 id="6-6session属性"><a href="#6-6session属性" class="headerlink" title="6.6session属性"></a><font color = 81cc3f size = 4>6.6session属性</font></h4><p>session 属性用于设置是否需要使用内置的session对象。session的属性值可以是true或false。session属性默认的属性值是true。</p><h4 id="6-7buffer属性"><a href="#6-7buffer属性" class="headerlink" title="6.7buffer属性"></a><font color = 81cc3f size = 4>6.7buffer属性</font></h4><p>内置输出流对象out负责将服务器的某些信息或运行结果发送到用户端显示。buffer属性用来指定out设置的缓冲区的大小或不使用缓冲区。例如：<br>&lt;%@ page buffer&#x3D; “24kb” %&gt;<br>buffer属性的默认值是8kb 。</p><h4 id="6-8autoFlush属性"><a href="#6-8autoFlush属性" class="headerlink" title="6.8autoFlush属性"></a><font color = 81cc3f size = 4>6.8autoFlush属性</font></h4><p>autoFlush可以取值true或false。autoFlush属性的默认值是true。</p><h4 id="6-9isThreadSafe-属性"><a href="#6-9isThreadSafe-属性" class="headerlink" title="6.9isThreadSafe 属性"></a><font color = 81cc3f size = 4>6.9isThreadSafe 属性</h4><p></font> <br>isThreadSafe的属性值可取true或false。<br>isThreadSafe属性值为true时，CPU的使用权在各个线程间快速切换.<br>isThreadSafe属性值设置成false时，该JSP页面同一时刻只能响应一个用户的请求，其他用户须排队等待。也就是说，CUP要保证一个线程将JSP页面执行完毕才会把CPU使用权切换给其他线程</p><h4 id="6-10info-属性"><a href="#6-10info-属性" class="headerlink" title="6.10info 属性"></a><font color = 81cc3f size = 4>6.10info 属性</font></h4><p>info属性的属性值是一个字符串，其目的是为JSP页面准备一个常用但可能要经常修改的字符串。例如，&lt;%@ page info&#x3D; “we are students” %&gt;可以在JSP页面中使用方法：getServletInfo();<br>获取info属性的属性值。</p><h4 id="6-11include-指令标记"><a href="#6-11include-指令标记" class="headerlink" title="6.11include 指令标记 "></a><font color = 81cc3f size = 4>6.11include 指令标记 </font></h4><p>如果需要在JSP页面内某处整体嵌入一个文件，就可以考虑使用include指令标记，其语法格式如下：<br>&lt;%@ include file&#x3D; “文件的URL “ %&gt;<br>■ 嵌入的文件的编码必须和当前JSP页面一致，比如二者都是utf-8编码。<br>■ 所谓静态嵌入，就是当前JSP页面和嵌入的文件合并成一个新的JSP页面，然后Tomcat服务器再将这个新的JSP页面转译成Java文件。因此，嵌入文件后，必须保证新合并成的JSP页面符合JSP语法规则，即能够成为一个JSP页面文件。<br>■include指令可以实现代码的复用。比如，每个JSP页面上都可能都需要一个导航条，以便用户在各个JSP页面之间方便地切换，那么每个JSP页面都可以使用include指令在页面的适当位置整体嵌入一个相同的文件。<br>■允许被嵌入的文件使用page指令指定contentType属性的值，但指定的值要与嵌入该文件的JSP页面中的page指令指定的contentType属性的值相同。</p><p><font color = 41ec52 size = 4>代码示例</font></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsp">example2_10_a.jsp<br>&lt;HTML&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html&quot;</span>%&gt;<br>&lt;%@ page pageEncoding=<span class="hljs-string">&quot;utf-8&quot;</span>%&gt;<br>&lt;%@ include file=<span class="hljs-string">&quot;myfile/ok.txt&quot;</span>%&gt;<span class="hljs-comment">//嵌入一个静态页面</span><br>&lt;h1&gt;这里是北京&lt;/h1&gt;<br>&lt;/HTML&gt;<br><br>example2_10_b.jsp<br>&lt;HTML&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html&quot;</span>%&gt;<br>&lt;%@ page pageEncoding=<span class="hljs-string">&quot;utf-8&quot;</span>%&gt;<br>&lt;%@ include file=<span class="hljs-string">&quot;myfile/ok.txt&quot;</span>%&gt; <span class="hljs-comment">//嵌入一个静态页面</span><br>&lt;h1&gt;这里是南京&lt;/h1&gt;<br>&lt;/HTML&gt;<br><br>ok.txt<br> <br>&lt;%@ <span class="hljs-type">page</span> <span class="hljs-variable">contentType</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;text/html&quot;</span>%&gt;<br>&lt;center&gt;<br>&lt;A href=<span class="hljs-string">&quot;example2_10_a.jsp&quot;</span>&gt;北京&lt;/A&gt; <span class="hljs-comment">//超链接，点击可以跳转到href属性的值的页面</span><br>&lt;A href=<span class="hljs-string">&quot;example2_10_b.jsp&quot;</span>&gt;南京&lt;/A&gt;<br></code></pre></td></tr></table></figure><h3 id="七：JSP动作标记"><a href="#七：JSP动作标记" class="headerlink" title="七：JSP动作标记"></a><font color = 3fccca size = 5><strong>七：JSP动作标记</strong></font></h3><h4 id="7-1-include动作标记"><a href="#7-1-include动作标记" class="headerlink" title="7.1 include动作标记"></a><font color = 81cc3f size = 4>7.1 include动作标记</font></h4><p>include 动作标记语法格式为：<br>&lt;jsp:include page&#x3D; “文件的URL” &#x2F;&gt;<br>或<br>&lt;jsp:include page&#x3D; “文件的URL” &gt;<br>   param子标记<br></jsp:include><br>include动作标记告诉JSP页面动态包含一个文件，即JSP页面运行时才将文件加入。与静态嵌入文件的include指令标记不同，当Tomcat服务器根据JSP页面产生成Java文件时，不把JSP页面中动作指令include所包含的文件与原JSP页面合并为一个新的JSP页面，而是告诉Java解释器，这个文件在JSP运行（Java文件的字节码文件被加载执行）时才包含进来。如果包含的文件是普通的文本文件，就将文件的内容发送到用户端，由用户端的浏览器负责显示；如果包含的文件是JSP文件，Tomcat服务器就执行这个文件，然后将执行的结果发送到用户端，并由用户端的浏览器负责显示这些结果。</p><h4 id="7-2-param动作标记"><a href="#7-2-param动作标记" class="headerlink" title="7.2 param动作标记"></a><font color = 81cc3f size = 4>7.2 param动作标记</font></h4><p>param标记以“名字—值”对的形式为其他标记提供附加信息。<br>&lt;jsp:param  name&#x3D; “参数”  value&#x3D; “ 参数的值” &#x2F;&gt;</p><h4 id="7-3-forward-动作标记"><a href="#7-3-forward-动作标记" class="headerlink" title="7.3 forward 动作标记"></a><font color = 81cc3f size = 4>7.3 forward 动作标记</font></h4><p>&lt;jsp:forward page&#x3D;”要转向的页面” &#x2F;&gt;<br>或<br>&lt;jsp:forward page&#x3D;”要转向的页面” &gt;<br>   param子标记<br></jsp:forward><br>指令的作用是：从该指令处停止当前页面的执行，而转向执行page属性指定的JSP页面。需要注意的是，当前页面使用forward动作标记转向后，尽管用户看到了转向后的页面的效果，但浏览器地址栏中显示的仍然是转向前的JSP页面的URL地址，因此，如果刷新浏览器的显示，将再次执行当前浏览器地址栏中显示的JSP页面。</p>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>二分查找</title>
    <link href="/2023/04/19/BinarySearch/"/>
    <url>/2023/04/19/BinarySearch/</url>
    
    <content type="html"><![CDATA[<h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p><font size = 3>※二分的本质并不是单调性 有单调性一定可以二分 用二分的不一定有单调性<br>※二分的本质是找<font color = pink>边界点</font> 每次二分时选择答案所在区间 当区间长度为1时 得出答案<br>※若有某种性质使得一部分满足 另一部分不满足,二分可以用来寻找这个性质边界(两个边界对应两个模板)<br>※<font color = pink>整数二分需要考虑边界问题，浮点二分不需要考虑边界问题。</font><br>**当l &#x3D; mid 时 mid &#x3D; l + r + 1 &gt;&gt; 1;**<br><strong>当r &#x3D; mid 时 mid &#x3D; l + r &gt;&gt; 1;</strong></font></p><h3 id="模板代码"><a href="#模板代码" class="headerlink" title="模板代码"></a>模板代码</h3> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(mid)</span> </span>&#123;<span class="hljs-comment">/* ... */</span>&#125;;<span class="hljs-comment">// 检查mid是否满足某种性质</span><br><span class="hljs-comment">//右半区间成立 二分右边的分界点</span><br><span class="hljs-comment">// 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用：</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bsearch_1</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (l &lt; r)<br>    &#123;<br>        <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;        <br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid)) r = mid;    <span class="hljs-comment">// check()判断mid是否满足性质</span><br>        <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br><br><span class="hljs-comment">//左半区间成立 二分左边的分界点</span><br><span class="hljs-comment">// 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用：</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bsearch_2</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (l &lt; r)<br>    &#123;<br>        <span class="hljs-type">int</span> mid = l + r + <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">1</span>;       <span class="hljs-comment">//向上取整</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid)) l = mid;<br>        <span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs cpp">### 整数二分<br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> q[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i ++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;q[i]);<br>    &#125;<br>    <span class="hljs-keyword">while</span>(m --)&#123;<br>        <span class="hljs-type">int</span> x;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>        <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>,r = n - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(l &lt; r)&#123;<br>            <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(q[mid] &gt;= x) r = mid;<br>            <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(q[l] != x) cout &lt;&lt; <span class="hljs-string">&quot;-1 -1&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">else</span>&#123;<br>            cout &lt;&lt; l &lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>            <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = n<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">while</span>(l &lt; r)&#123;<br>                <span class="hljs-type">int</span> mid = l + r + <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span>(q[mid] &lt;= x) l =mid;<br>                <span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;<br>            &#125;<br>            cout &lt;&lt; l &lt;&lt; endl;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>### 浮点二分（求某个浮点数的平方根）<br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>    <span class="hljs-type">double</span> l = <span class="hljs-number">0</span>,r = x;<br>    <span class="hljs-keyword">while</span>(r - l &gt; <span class="hljs-number">1e-8</span>)&#123;<br>        <span class="hljs-type">double</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(mid*mid &gt;= x) r = mid;<br>        <span class="hljs-keyword">else</span> l = mid;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lf\n&quot;</span>,l);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color = 3fccca size = 4><strong>算法书写过程</strong></font><br><font color = f18ed3 size = 3><br>★先写mid &#x3D; l + r &gt;&gt; 1;<br>★在确定check函数；<br>★最后根据所写出的l与r的值确定mid是否要加1，防止边界问题<br></font><br><font color = 3fccca size = 4>分析边界问题</font><br><font color = e45a7c size = 3>▲若当l &#x3D; mid 时， 没有取 mid &#x3D; l + r + 1 &gt;&gt;1 向上取整，而是取mid &#x3D; l + r &gt;&gt; 1 向下取整<br>当l &#x3D; r - 1时，mid &#x3D; l，若此时check函数返回值为true，则此时跟新的区间为[l,r];所以此次循环并没有改变区间，则下次循环也不会改变区间，也就是进入了死循环<br>▲当mid取了 mid &#x3D; l + r + 1 &gt;&gt; 1时，则mid &#x3D; r，则此时更新的区间为[r,r],就会停止循环了，不会进入死循环了.</font></p>]]></content>
    
    
    <categories>
      
      <category>算法基础</category>
      
      <category>第一章</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>归并排序</title>
    <link href="/2023/04/19/merge-sort/"/>
    <url>/2023/04/19/merge-sort/</url>
    
    <content type="html"><![CDATA[<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p><strong>分治</strong><br>1.确定分界点—-mid &#x3D; (l + r) &#x2F; 2  <br>2.递归排序left、right<br>3.归并–合二为一 </p><p><strong>完整代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> +<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> q[N];<br><span class="hljs-type">int</span> temp[N];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[],<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(l&gt;=r)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">merge_sort</span>(q,l,mid),<span class="hljs-built_in">merge_sort</span>(q,mid+<span class="hljs-number">1</span>,r);<br>    <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>,i = l,j = mid +<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)<br>        <span class="hljs-keyword">if</span>(q[i] &lt;= q[j]) temp[k++] = q[i++];<br>        <span class="hljs-keyword">else</span> temp[k++] = q[j++];<br>    <span class="hljs-keyword">while</span>(i &lt;= mid) temp[k++] = q[i++];<br>    <span class="hljs-keyword">while</span>(j &lt;= r) temp[k++] = q[j++];<br>    <span class="hljs-keyword">for</span>(i = l,j = <span class="hljs-number">0</span>;i &lt;= r;i++,j++)<br>    q[i] = temp[j];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i ++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;q[i]);<br>    &#125;<br>    <span class="hljs-built_in">merge_sort</span>(q,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\t&quot;</span>,q[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="代码模板："><a href="#代码模板：" class="headerlink" title="代码模板："></a><strong>代码模板</strong>：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[],<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(l &gt;= r)<br>    <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">merge_sort</span>(q,l,mid),<span class="hljs-built_in">merge_sort</span>(q,mid+<span class="hljs-number">1</span>,r);<br>    <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>,i = l,j = mid + <span class="hljs-number">1</span>;        <span class="hljs-comment">//i指向左边的起点，j指向右边的起点</span><br>    <span class="hljs-keyword">while</span>(i &lt;= mid &amp;&amp; j&lt;= r) <br>        <span class="hljs-keyword">if</span>(q[i] &lt; q[j]) temp[k++] = q[i];<br>        <span class="hljs-keyword">else</span> temp[k++] = q[j];<br>    <span class="hljs-keyword">while</span>(i &lt;= mid) temp[k++] = q[i++];<br>    <span class="hljs-keyword">while</span>(j &lt;= r) temp[k++] = q[j++];<br>    <span class="hljs-keyword">for</span>(i = l, j = <span class="hljs-number">0</span>;i &lt;= r;i++,j++)<br>    q[i] = temp[j];<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>算法图解</strong><br><img src="/2023/04/19/merge-sort/2023-04-19-23-19-36.png"></p><h2 id="归并排序算法的特点"><a href="#归并排序算法的特点" class="headerlink" title="归并排序算法的特点"></a>归并排序算法的特点</h2><p><strong>1.时间复杂度</strong>  <br>归并排序算法每次将序列折半分组，共需要logn轮，因此归并排序算法的时间复杂度是O(nlogn)    <br><strong>2.空间复杂度</strong>    \<br>归并排序算法排序过程中需要额外的一个序列去存储排序后的结果，所占空间是n，因此空间复杂度为O(n) <br><strong>3.稳定性</strong>    <br>归并排序算法排序过程中需要额外的一个序列去存储排序后的结果，所占空间是n，因此空间复杂度为O(n)</p>]]></content>
    
    
    <categories>
      
      <category>算法基础</category>
      
      <category>第一章</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>快速排序</title>
    <link href="/2023/04/19/quick-sort/"/>
    <url>/2023/04/19/quick-sort/</url>
    
    <content type="html"><![CDATA[<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p><strong>分治</strong></p><ol><li>确定分界点：头 、尾 、（头＋尾）&#x2F;2、 随机</li><li>调整区间，使得小于分界点的数全在其左边，大于分界点的数全在右边<ul><li>利用两个指针在数列两头向中间移动，左边的指针在碰到大于等于分界点时停下，右边的指针反之，都停下时交换两数，循环上述过程，直到两指针相交</li></ul></li><li>递归处理左右两端</li></ol><p>题目:<br><a href="https://www.acwing.com/problem/content/787/">快速排序</a></p><p>完整代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span>  std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span>+<span class="hljs-number">10</span>;<span class="hljs-comment">//加10防止越界</span><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> q[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;         <span class="hljs-comment">//退出递归的条件</span><br>    <span class="hljs-type">int</span> i = l - <span class="hljs-number">1</span>, j = r + <span class="hljs-number">1</span>, x = q[l + r &gt;&gt; <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">while</span> (i &lt; j)           <br>    &#123;<br>        <span class="hljs-keyword">do</span> i ++ ; <span class="hljs-keyword">while</span> (q[i] &lt; x);<br>        <span class="hljs-keyword">do</span> j -- ; <span class="hljs-keyword">while</span> (q[j] &gt; x);<br>        <span class="hljs-keyword">if</span> (i &lt; j) <span class="hljs-built_in">swap</span>(q[i], q[j]);<br>    &#125;<br>    <span class="hljs-built_in">quick_sort</span>(q, l, j),<span class="hljs-built_in">quick_sort</span>(q, j + <span class="hljs-number">1</span>, r);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;q[i]);<br>    <span class="hljs-built_in">quick_sort</span>(q,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,q[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="代码模板："><a href="#代码模板：" class="headerlink" title="代码模板："></a><strong>代码模板</strong>：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-type">int</span> i = l - <span class="hljs-number">1</span>, j = r + <span class="hljs-number">1</span>, x = q[l + r &gt;&gt; <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">while</span> (i &lt; j)<br>    &#123;<br>        <span class="hljs-keyword">do</span> i ++ ; <span class="hljs-keyword">while</span> (q[i] &lt; x);<br>        <span class="hljs-keyword">do</span> j -- ; <span class="hljs-keyword">while</span> (q[j] &gt; x);<br>        <span class="hljs-keyword">if</span> (i &lt; j) <span class="hljs-built_in">swap</span>(q[i], q[j]);<br>    &#125;<br>    <span class="hljs-built_in">quick_sort</span>(q, l, j), <span class="hljs-built_in">quick_sort</span>(q, j + <span class="hljs-number">1</span>, r);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p><strong>若x取q[l]或者q[r]要考虑边界问题</strong><br>若 递归处用 i-1 和 i ,则x<strong>不可以</strong>取q[l] ,<strong>可以</strong>取q[r]或者q[(l+r+1)&#x2F;2]或者q[l+r+1&gt;&gt;1]等<br>若 递归处用 j 和 j+1 ,则x<strong>不可以</strong>取q[r] ,<strong>可以</strong>取q[l]或者q[(l+r)&#x2F;2]或者q[l+r&gt;&gt;1]等<br>否则可能会出现死循环<br>例如:x取q[l],递归处用i-1和i,排序12,会无限调用递归quick_sort(q,0,1),即无限划分</p><p><strong>快排是不稳定的</strong><br>在排序前，关键字值相等的不同记录，排序后相对位置保持不变的排序方法，称为稳定排序方法（但其实没软用）<br>如何把快排变成稳定的呢—————把快排每个数变成不同的，可把每个数据弄成二元组，双关键字排序</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a><strong>分析</strong></h3><p><strong>边界问题分析</strong><br>分治算法最怕<code>n分成0和n,或n分成n和0</code>,这会造成<em>无限划分</em><br>若<code>x=q[l]</code>时 最极端情况是<code>i=l,j=l</code> 此时若划分为<code>(l,i-1)</code>和<code>(i,r)</code> 其中<code>(i,r)</code>划分的就是<code>n</code> 这就出现了<em>无限划分</em><br>若<code>x=q[r]</code>时 最极端情况时<code>i=r,j=r</code> 此时若划分为<code>(l,j)</code>和<code>(j+1,r)</code> 其中<code>(l,j)</code>划分的就是<code>n</code> 这就出现了<em>无限划分</em><br>最后是关于<code>q[l+r&gt;&gt;1]</code>和<code>q[l+r+1&gt;&gt;1]</code> 的问题,<br><code>q[l+r+1&gt;&gt;1]</code>是向上取整,因为向上取整时有可能取到q[r],为了避免<em>无限划分</em>,所以递归处划分应该是i-1和i<br><code>q[l+r&gt;&gt;1]</code>是向下取整,因为向下取整时有可能取到q[l],为了避免<em>无限划分</em>,所以递归处划分应该时j和j+1<br><a href="https://www.acwing.com/solution/content/16777/"></a></p><p>最后<br>为什么y总要<code>const int N = 1e6+10;</code> 要加10呢 我也没懂 但参考:<a href="https://www.zhihu.com/question/35047872">知乎</a></p><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><h3 id="算法思想-1"><a href="#算法思想-1" class="headerlink" title="算法思想"></a>算法思想</h3><p>分治</p><ol><li>确定分界点：mid&#x3D;l+r&gt;&gt;1</li><li>递归排序left，right</li><li>归并————合二为一</li></ol><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3>]]></content>
    
    
    <categories>
      
      <category>算法基础</category>
      
      <category>第一章</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
